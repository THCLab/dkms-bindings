/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface Configs {
  dbPath?: string
  initialOobis?: string
}
export interface Key {
  p: string
}
export interface Signature {
  p: string
}
export const enum KeyType {
  ECDSAsecp256k1 = 0,
  Ed25519 = 1,
  Ed448 = 2,
  X25519 = 3,
  X448 = 4
}
export const enum SignatureType {
  Ed25519Sha512 = 0,
  ECDSAsecp256k1Sha256 = 1,
  Ed448 = 2
}
export class ConfigBuilder {
  dbPath?: string
  initialOobis?: string
  constructor(dbPath?: string, initialOobis?: string)
  withInitialOobis(oobisJson: string): ConfigBuilder
  withDbPath(dbPath: string): ConfigBuilder
  build(): Configs
}
export type JsPublicKey = PublicKey
export class PublicKey {
  prefix: string
  constructor(algorithm: KeyType, key: Buffer)
  getKey(): Key
}
export class SignatureBuilder {
  prefix: string
  constructor(algorithm: SignatureType, signature: Buffer)
  getSignature(): Signature
}
export class JsIdentifier {
  getKel(): Promise<string>
  getId(): Promise<string>
  notifyWitness(): Promise<void>
  queryMailbox(): Promise<Array<Buffer>>
  finalizeQueryMailbox(qries: Array<Buffer>, signatures: Array<Signature>): Promise<void>
}
export type JsController = Controller
export class Controller {
  constructor(config?: Configs | undefined | null)
  incept(pks: Array<Key>, npks: Array<Key>, witnesses: Array<string>, witnessThreshold: number): Promise<Buffer>
  finalizeInception(icpEvent: Buffer, signatures: Array<Signature>): JsIdentifier
}
