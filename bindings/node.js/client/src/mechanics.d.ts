/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface Configs {
  dbPath?: string
  initialOobis?: string
}
export interface Key {
  p: string
}
export const enum VcState {
  Issued = 0,
  Revoked = 1,
  NotIssued = 2
}
export const enum KeyType {
  ECDSAsecp256k1 = 0,
  Ed25519 = 1,
  Ed448 = 2,
  X25519 = 3,
  X448 = 4
}
export const enum SignatureType {
  Ed25519Sha512 = 0,
  ECDSAsecp256k1Sha256 = 1,
  Ed448 = 2
}
export class ConfigBuilder {
  dbPath?: string
  initialOobis?: string
  constructor(dbPath?: string, initialOobis?: string)
  withInitialOobis(oobisJson: string): ConfigBuilder
  withDbPath(dbPath: string): ConfigBuilder
  build(): Configs
}
export type JsPublicKey = PublicKey
export class PublicKey {
  prefix: string
  constructor(algorithm: KeyType, key: Buffer)
  getKey(): Key
}
export class RotationConfiguration {
  currentPublicKeys: Array<string>
  nextPublicKeys: Array<string>
  witnessesToAdd: Array<string>
  witnessesToRemove: Array<string>
  witnessThreshold: number
  constructor()
  withCurrentKeys(keys: Array<PublicKey>): RotationConfiguration
  withNextKeys(keys: Array<PublicKey>): RotationConfiguration
  withWitnessToAdd(locations: Array<string>): RotationConfiguration
  withWitnessToRemove(witnessIds: Array<string>): RotationConfiguration
  withWitnessThreshold(threshold: number): RotationConfiguration
}
export class Signature {
  prefix: string
  constructor(algorithm: SignatureType, signature: Buffer)
}
export class RegistryInceptionData {
  ixn: Buffer
  registryId: string
}
export class IssuanceData {
  ixn: Buffer
  vcHash: string
}
export class JsIdentifier {
  getKel(): Promise<string>
  findState(aboutId: string): Promise<string>
  getId(): Promise<string>
  notifyWitness(): Promise<void>
  queryMailbox(): Promise<Array<Buffer>>
  finalizeQueryMailbox(queries: Array<Buffer>, signatures: Array<Signature>): Promise<void>
  rotate(config: RotationConfiguration): Promise<Buffer>
  finalizeRotation(rotEvent: Buffer, signature: Signature): Promise<void>
  inceptRegistry(): Promise<RegistryInceptionData>
  finalizeInceptRegistry(event: Buffer, signature: Signature): Promise<void>
  issue(vc: Buffer): Promise<IssuanceData>
  finalizeIssue(event: Buffer, signature: Signature): Promise<void>
  revoke(vcHash: string): Promise<Buffer>
  finalizeRevoke(event: Buffer, signature: Signature): Promise<void>
  notifyBackers(): Promise<void>
  addWatcher(watcherOobi: string): Promise<Buffer>
  finalizeAddWatcher(event: Buffer, signature: Signature): Promise<void>
  queryKel(aboutId: string, sn: number, digest: string): Promise<Array<Buffer>>
  finalizeQueryKel(qries: Array<Buffer>, signatures: Array<Signature>): Promise<boolean>
  queryFullKel(aboutId: string): Promise<Array<Buffer>>
  vcState(digest: string): Promise<VcState | null>
  sendOobiToWatcher(oobi: string): Promise<void>
  queryTel(registryId: string, vcId: string): Promise<Buffer>
  finalizeQueryTel(event: Buffer, signature: Signature): Promise<void>
  oobi(): Promise<Array<string>>
  registryIdOobi(): Promise<Array<string> | null>
  registryId(): Promise<string | null>
  sign(input: string, signatures: Array<Signature>): Promise<string | null>
  verify(stream: string): Promise<boolean>
}
export class InceptionConfiguration {
  currentPublicKeys: Array<string>
  nextPublicKeys: Array<string>
  witnessesLocation: Array<string>
  witnessThreshold: number
  constructor()
  withCurrentKeys(keys: Array<PublicKey>): InceptionConfiguration
  withNextKeys(keys: Array<PublicKey>): InceptionConfiguration
  withWitness(locations: Array<string>): InceptionConfiguration
  withWitnessThreshold(threshold: number): InceptionConfiguration
}
export type JsController = Controller
export class Controller {
  constructor(config?: Configs | undefined | null)
  incept(config: InceptionConfiguration): Promise<Buffer>
  finalizeInception(icpEvent: Buffer, signatures: Array<Signature>): JsIdentifier
}
