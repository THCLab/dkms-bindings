// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

part 'bridge_generated.freezed.dart';

abstract class KeriDart {
  Future<Config> withInitialOobis(
      {required Config config, required String oobisJson, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWithInitialOobisConstMeta;

  Future<bool> initKel(
      {required String inputAppDir, Config? optionalConfigs, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitKelConstMeta;

  Future<String> incept(
      {required List<PublicKey> publicKeys,
      required List<PublicKey> nextPubKeys,
      required List<String> witnesses,
      required int witnessThreshold,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInceptConstMeta;

  Future<Identifier> finalizeInception(
      {required String event, required Signature signature, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFinalizeInceptionConstMeta;

  Future<String> rotate(
      {required Identifier identifier,
      required List<PublicKey> currentKeys,
      required List<PublicKey> newNextKeys,
      required List<String> witnessToAdd,
      required List<String> witnessToRemove,
      required int witnessThreshold,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRotateConstMeta;

  Future<String> anchor(
      {required Identifier identifier,
      required String data,
      required SelfAddressing algo,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAnchorConstMeta;

  Future<String> anchorDigest(
      {required Identifier identifier,
      required List<String> sais,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAnchorDigestConstMeta;

  Future<String> addWatcher(
      {required Identifier identifier,
      required String watcherOobi,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddWatcherConstMeta;

  Future<bool> finalizeEvent(
      {required Identifier identifier,
      required String event,
      required Signature signature,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFinalizeEventConstMeta;

  Future<GroupInception> inceptGroup(
      {required Identifier identifier,
      required List<Identifier> participants,
      required int signatureThreshold,
      required List<String> initialWitnesses,
      required int witnessThreshold,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInceptGroupConstMeta;

  Future<Identifier> finalizeGroupIncept(
      {required Identifier identifier,
      required String groupEvent,
      required Signature signature,
      required List<DataAndSignature> toForward,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFinalizeGroupInceptConstMeta;

  Future<List<String>> queryMailbox(
      {required Identifier whoAsk,
      required Identifier aboutWho,
      required List<String> witness,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kQueryMailboxConstMeta;

  Future<List<ActionRequired>> finalizeMailboxQuery(
      {required Identifier identifier,
      required String queryEvent,
      required Signature signature,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFinalizeMailboxQueryConstMeta;

  Future<bool> resolveOobi({required String oobiJson, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kResolveOobiConstMeta;

  Future<bool> query(
      {required Identifier identifier,
      required String oobisJson,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kQueryConstMeta;

  Future<bool> processStream({required String stream, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kProcessStreamConstMeta;

  Future<String> getKel({required Identifier identifier, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetKelConstMeta;

  /// Returns pairs: public key encoded in base64 and signature encoded in hex
  Future<List<PublicKeySignaturePair>> getCurrentPublicKey(
      {required String attachment, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetCurrentPublicKeyConstMeta;

  Future<PublicKey> newStaticMethodPublicKey(
      {required Basic kt, required String keyB64, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodPublicKeyConstMeta;

  Future<Digest> newStaticMethodDigest(
      {required SelfAddressing dt,
      required Uint8List digestData,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodDigestConstMeta;

  Future<Signature> newFromHexStaticMethodSignature(
      {required SelfSigning st, required String signature, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewFromHexStaticMethodSignatureConstMeta;

  Future<Signature> newFromB64StaticMethodSignature(
      {required SelfSigning st, required String signature, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewFromB64StaticMethodSignatureConstMeta;

  Future<Identifier> fromStrStaticMethodIdentifier(
      {required String idStr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFromStrStaticMethodIdentifierConstMeta;

  Future<String> toStrMethodIdentifier(
      {required Identifier that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kToStrMethodIdentifierConstMeta;

  Future<DataAndSignature> newStaticMethodDataAndSignature(
      {required String data, required Signature signature, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodDataAndSignatureConstMeta;
}

enum Action {
  MultisigRequest,
  DelegationRequest,
}

class ActionRequired {
  final Action action;
  final String data;
  final String additionaData;

  ActionRequired({
    required this.action,
    required this.data,
    required this.additionaData,
  });
}

enum Basic {
  ECDSAsecp256k1NT,
  ECDSAsecp256k1,
  Ed25519NT,
  Ed25519,
  Ed448NT,
  Ed448,
  X25519,
  X448,
}

class Config {
  final String initialOobis;

  Config({
    required this.initialOobis,
  });
}

class DataAndSignature {
  final KeriDart bridge;
  final String data;
  final Signature signature;

  DataAndSignature({
    required this.bridge,
    required this.data,
    required this.signature,
  });

  static Future<DataAndSignature> newDataAndSignature(
          {required KeriDart bridge,
          required String data,
          required Signature signature,
          dynamic hint}) =>
      bridge.newStaticMethodDataAndSignature(
          data: data, signature: signature, hint: hint);
}

class Digest {
  final KeriDart bridge;
  final SelfAddressing derivation;
  final Uint8List digest;

  Digest({
    required this.bridge,
    required this.derivation,
    required this.digest,
  });

  static Future<Digest> newDigest(
          {required KeriDart bridge,
          required SelfAddressing dt,
          required Uint8List digestData,
          dynamic hint}) =>
      bridge.newStaticMethodDigest(dt: dt, digestData: digestData, hint: hint);
}

/// Struct for collecting data that need to be signed: generated event and
/// exchange messages that are needed to forward multisig request to other group
/// participants.
class GroupInception {
  final String icpEvent;
  final List<String> exchanges;

  GroupInception({
    required this.icpEvent,
    required this.exchanges,
  });
}

@freezed
class Identifier with _$Identifier {
  const factory Identifier.basic(
    PublicKey field0,
  ) = Identifier_Basic;
  const factory Identifier.selfAddressing(
    Digest field0,
  ) = Identifier_SelfAddressing;
  const factory Identifier.selfSigning(
    Signature field0,
  ) = Identifier_SelfSigning;
}

class PublicKey {
  final KeriDart bridge;
  final Basic derivation;
  final Uint8List publicKey;

  PublicKey({
    required this.bridge,
    required this.derivation,
    required this.publicKey,
  });

  static Future<PublicKey> newPublicKey(
          {required KeriDart bridge,
          required Basic kt,
          required String keyB64,
          dynamic hint}) =>
      bridge.newStaticMethodPublicKey(kt: kt, keyB64: keyB64, hint: hint);
}

class PublicKeySignaturePair {
  final PublicKey key;
  final Signature signature;

  PublicKeySignaturePair({
    required this.key,
    required this.signature,
  });
}

@freezed
class SelfAddressing with _$SelfAddressing {
  const factory SelfAddressing.blake3256() = SelfAddressing_Blake3_256;
  const factory SelfAddressing.sha3256() = SelfAddressing_SHA3_256;
  const factory SelfAddressing.sha2256() = SelfAddressing_SHA2_256;
  const factory SelfAddressing.blake3512() = SelfAddressing_Blake3_512;
  const factory SelfAddressing.sha3512() = SelfAddressing_SHA3_512;
  const factory SelfAddressing.blake2B512() = SelfAddressing_Blake2B512;
  const factory SelfAddressing.sha2512() = SelfAddressing_SHA2_512;
  const factory SelfAddressing.blake2B256(
    Uint8List field0,
  ) = SelfAddressing_Blake2B256;
  const factory SelfAddressing.blake2S256(
    Uint8List field0,
  ) = SelfAddressing_Blake2S256;
}

enum SelfSigning {
  Ed25519Sha512,
  ECDSAsecp256k1Sha256,
  Ed448,
}

class Signature {
  final KeriDart bridge;
  final SelfSigning derivation;
  final Uint8List signature;

  Signature({
    required this.bridge,
    required this.derivation,
    required this.signature,
  });

  static Future<Signature> newFromHex(
          {required KeriDart bridge,
          required SelfSigning st,
          required String signature,
          dynamic hint}) =>
      bridge.newFromHexStaticMethodSignature(
          st: st, signature: signature, hint: hint);

  static Future<Signature> newFromB64(
          {required KeriDart bridge,
          required SelfSigning st,
          required String signature,
          dynamic hint}) =>
      bridge.newFromB64StaticMethodSignature(
          st: st, signature: signature, hint: hint);
}

class KeriDartImpl implements KeriDart {
  final KeriDartPlatform _platform;
  factory KeriDartImpl(ExternalLibrary dylib) =>
      KeriDartImpl.raw(KeriDartPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory KeriDartImpl.wasm(FutureOr<WasmModule> module) =>
      KeriDartImpl(module as ExternalLibrary);
  KeriDartImpl.raw(this._platform);
  Future<Config> withInitialOobis(
          {required Config config, required String oobisJson, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_with_initial_oobis(
            port_,
            _platform.api2wire_box_autoadd_config(config),
            _platform.api2wire_String(oobisJson)),
        parseSuccessData: _wire2api_config,
        constMeta: kWithInitialOobisConstMeta,
        argValues: [config, oobisJson],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kWithInitialOobisConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "with_initial_oobis",
        argNames: ["config", "oobisJson"],
      );

  Future<bool> initKel(
          {required String inputAppDir,
          Config? optionalConfigs,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_init_kel(
            port_,
            _platform.api2wire_String(inputAppDir),
            _platform.api2wire_opt_box_autoadd_config(optionalConfigs)),
        parseSuccessData: _wire2api_bool,
        constMeta: kInitKelConstMeta,
        argValues: [inputAppDir, optionalConfigs],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kInitKelConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_kel",
        argNames: ["inputAppDir", "optionalConfigs"],
      );

  Future<String> incept(
          {required List<PublicKey> publicKeys,
          required List<PublicKey> nextPubKeys,
          required List<String> witnesses,
          required int witnessThreshold,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_incept(
            port_,
            _platform.api2wire_list_public_key(publicKeys),
            _platform.api2wire_list_public_key(nextPubKeys),
            _platform.api2wire_StringList(witnesses),
            _platform.api2wire_u64(witnessThreshold)),
        parseSuccessData: _wire2api_String,
        constMeta: kInceptConstMeta,
        argValues: [publicKeys, nextPubKeys, witnesses, witnessThreshold],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kInceptConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "incept",
        argNames: [
          "publicKeys",
          "nextPubKeys",
          "witnesses",
          "witnessThreshold"
        ],
      );

  Future<Identifier> finalizeInception(
          {required String event,
          required Signature signature,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_finalize_inception(
            port_,
            _platform.api2wire_String(event),
            _platform.api2wire_box_autoadd_signature(signature)),
        parseSuccessData: _wire2api_identifier,
        constMeta: kFinalizeInceptionConstMeta,
        argValues: [event, signature],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kFinalizeInceptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "finalize_inception",
        argNames: ["event", "signature"],
      );

  Future<String> rotate(
          {required Identifier identifier,
          required List<PublicKey> currentKeys,
          required List<PublicKey> newNextKeys,
          required List<String> witnessToAdd,
          required List<String> witnessToRemove,
          required int witnessThreshold,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_rotate(
            port_,
            _platform.api2wire_box_autoadd_identifier(identifier),
            _platform.api2wire_list_public_key(currentKeys),
            _platform.api2wire_list_public_key(newNextKeys),
            _platform.api2wire_StringList(witnessToAdd),
            _platform.api2wire_StringList(witnessToRemove),
            _platform.api2wire_u64(witnessThreshold)),
        parseSuccessData: _wire2api_String,
        constMeta: kRotateConstMeta,
        argValues: [
          identifier,
          currentKeys,
          newNextKeys,
          witnessToAdd,
          witnessToRemove,
          witnessThreshold
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kRotateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "rotate",
        argNames: [
          "identifier",
          "currentKeys",
          "newNextKeys",
          "witnessToAdd",
          "witnessToRemove",
          "witnessThreshold"
        ],
      );

  Future<String> anchor(
          {required Identifier identifier,
          required String data,
          required SelfAddressing algo,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_anchor(
            port_,
            _platform.api2wire_box_autoadd_identifier(identifier),
            _platform.api2wire_String(data),
            _platform.api2wire_box_autoadd_self_addressing(algo)),
        parseSuccessData: _wire2api_String,
        constMeta: kAnchorConstMeta,
        argValues: [identifier, data, algo],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kAnchorConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "anchor",
        argNames: ["identifier", "data", "algo"],
      );

  Future<String> anchorDigest(
          {required Identifier identifier,
          required List<String> sais,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_anchor_digest(
            port_,
            _platform.api2wire_box_autoadd_identifier(identifier),
            _platform.api2wire_StringList(sais)),
        parseSuccessData: _wire2api_String,
        constMeta: kAnchorDigestConstMeta,
        argValues: [identifier, sais],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kAnchorDigestConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "anchor_digest",
        argNames: ["identifier", "sais"],
      );

  Future<String> addWatcher(
          {required Identifier identifier,
          required String watcherOobi,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_add_watcher(
            port_,
            _platform.api2wire_box_autoadd_identifier(identifier),
            _platform.api2wire_String(watcherOobi)),
        parseSuccessData: _wire2api_String,
        constMeta: kAddWatcherConstMeta,
        argValues: [identifier, watcherOobi],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kAddWatcherConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add_watcher",
        argNames: ["identifier", "watcherOobi"],
      );

  Future<bool> finalizeEvent(
          {required Identifier identifier,
          required String event,
          required Signature signature,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_finalize_event(
            port_,
            _platform.api2wire_box_autoadd_identifier(identifier),
            _platform.api2wire_String(event),
            _platform.api2wire_box_autoadd_signature(signature)),
        parseSuccessData: _wire2api_bool,
        constMeta: kFinalizeEventConstMeta,
        argValues: [identifier, event, signature],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kFinalizeEventConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "finalize_event",
        argNames: ["identifier", "event", "signature"],
      );

  Future<GroupInception> inceptGroup(
          {required Identifier identifier,
          required List<Identifier> participants,
          required int signatureThreshold,
          required List<String> initialWitnesses,
          required int witnessThreshold,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_incept_group(
            port_,
            _platform.api2wire_box_autoadd_identifier(identifier),
            _platform.api2wire_list_identifier(participants),
            _platform.api2wire_u64(signatureThreshold),
            _platform.api2wire_StringList(initialWitnesses),
            _platform.api2wire_u64(witnessThreshold)),
        parseSuccessData: _wire2api_group_inception,
        constMeta: kInceptGroupConstMeta,
        argValues: [
          identifier,
          participants,
          signatureThreshold,
          initialWitnesses,
          witnessThreshold
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kInceptGroupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "incept_group",
        argNames: [
          "identifier",
          "participants",
          "signatureThreshold",
          "initialWitnesses",
          "witnessThreshold"
        ],
      );

  Future<Identifier> finalizeGroupIncept(
          {required Identifier identifier,
          required String groupEvent,
          required Signature signature,
          required List<DataAndSignature> toForward,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_finalize_group_incept(
            port_,
            _platform.api2wire_box_autoadd_identifier(identifier),
            _platform.api2wire_String(groupEvent),
            _platform.api2wire_box_autoadd_signature(signature),
            _platform.api2wire_list_data_and_signature(toForward)),
        parseSuccessData: _wire2api_identifier,
        constMeta: kFinalizeGroupInceptConstMeta,
        argValues: [identifier, groupEvent, signature, toForward],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kFinalizeGroupInceptConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "finalize_group_incept",
        argNames: ["identifier", "groupEvent", "signature", "toForward"],
      );

  Future<List<String>> queryMailbox(
          {required Identifier whoAsk,
          required Identifier aboutWho,
          required List<String> witness,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_query_mailbox(
            port_,
            _platform.api2wire_box_autoadd_identifier(whoAsk),
            _platform.api2wire_box_autoadd_identifier(aboutWho),
            _platform.api2wire_StringList(witness)),
        parseSuccessData: _wire2api_StringList,
        constMeta: kQueryMailboxConstMeta,
        argValues: [whoAsk, aboutWho, witness],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kQueryMailboxConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "query_mailbox",
        argNames: ["whoAsk", "aboutWho", "witness"],
      );

  Future<List<ActionRequired>> finalizeMailboxQuery(
          {required Identifier identifier,
          required String queryEvent,
          required Signature signature,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_finalize_mailbox_query(
            port_,
            _platform.api2wire_box_autoadd_identifier(identifier),
            _platform.api2wire_String(queryEvent),
            _platform.api2wire_box_autoadd_signature(signature)),
        parseSuccessData: _wire2api_list_action_required,
        constMeta: kFinalizeMailboxQueryConstMeta,
        argValues: [identifier, queryEvent, signature],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kFinalizeMailboxQueryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "finalize_mailbox_query",
        argNames: ["identifier", "queryEvent", "signature"],
      );

  Future<bool> resolveOobi({required String oobiJson, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner
            .wire_resolve_oobi(port_, _platform.api2wire_String(oobiJson)),
        parseSuccessData: _wire2api_bool,
        constMeta: kResolveOobiConstMeta,
        argValues: [oobiJson],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kResolveOobiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "resolve_oobi",
        argNames: ["oobiJson"],
      );

  Future<bool> query(
          {required Identifier identifier,
          required String oobisJson,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_query(
            port_,
            _platform.api2wire_box_autoadd_identifier(identifier),
            _platform.api2wire_String(oobisJson)),
        parseSuccessData: _wire2api_bool,
        constMeta: kQueryConstMeta,
        argValues: [identifier, oobisJson],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kQueryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "query",
        argNames: ["identifier", "oobisJson"],
      );

  Future<bool> processStream({required String stream, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner
            .wire_process_stream(port_, _platform.api2wire_String(stream)),
        parseSuccessData: _wire2api_bool,
        constMeta: kProcessStreamConstMeta,
        argValues: [stream],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kProcessStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "process_stream",
        argNames: ["stream"],
      );

  Future<String> getKel({required Identifier identifier, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_get_kel(
            port_, _platform.api2wire_box_autoadd_identifier(identifier)),
        parseSuccessData: _wire2api_String,
        constMeta: kGetKelConstMeta,
        argValues: [identifier],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetKelConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_kel",
        argNames: ["identifier"],
      );

  Future<List<PublicKeySignaturePair>> getCurrentPublicKey(
          {required String attachment, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_get_current_public_key(
            port_, _platform.api2wire_String(attachment)),
        parseSuccessData: _wire2api_list_public_key_signature_pair,
        constMeta: kGetCurrentPublicKeyConstMeta,
        argValues: [attachment],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetCurrentPublicKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_current_public_key",
        argNames: ["attachment"],
      );

  Future<PublicKey> newStaticMethodPublicKey(
          {required Basic kt, required String keyB64, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_new__static_method__PublicKey(
            port_, api2wire_basic(kt), _platform.api2wire_String(keyB64)),
        parseSuccessData: (d) => _wire2api_public_key(d),
        constMeta: kNewStaticMethodPublicKeyConstMeta,
        argValues: [kt, keyB64],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodPublicKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__PublicKey",
        argNames: ["kt", "keyB64"],
      );

  Future<Digest> newStaticMethodDigest(
          {required SelfAddressing dt,
          required Uint8List digestData,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_new__static_method__Digest(
            port_,
            _platform.api2wire_box_autoadd_self_addressing(dt),
            _platform.api2wire_uint_8_list(digestData)),
        parseSuccessData: (d) => _wire2api_digest(d),
        constMeta: kNewStaticMethodDigestConstMeta,
        argValues: [dt, digestData],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodDigestConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__Digest",
        argNames: ["dt", "digestData"],
      );

  Future<Signature> newFromHexStaticMethodSignature(
          {required SelfSigning st, required String signature, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner
            .wire_new_from_hex__static_method__Signature(
                port_,
                api2wire_self_signing(st),
                _platform.api2wire_String(signature)),
        parseSuccessData: (d) => _wire2api_signature(d),
        constMeta: kNewFromHexStaticMethodSignatureConstMeta,
        argValues: [st, signature],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta
      get kNewFromHexStaticMethodSignatureConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new_from_hex__static_method__Signature",
            argNames: ["st", "signature"],
          );

  Future<Signature> newFromB64StaticMethodSignature(
          {required SelfSigning st, required String signature, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner
            .wire_new_from_b64__static_method__Signature(
                port_,
                api2wire_self_signing(st),
                _platform.api2wire_String(signature)),
        parseSuccessData: (d) => _wire2api_signature(d),
        constMeta: kNewFromB64StaticMethodSignatureConstMeta,
        argValues: [st, signature],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta
      get kNewFromB64StaticMethodSignatureConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new_from_b64__static_method__Signature",
            argNames: ["st", "signature"],
          );

  Future<Identifier> fromStrStaticMethodIdentifier(
          {required String idStr, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner
            .wire_from_str__static_method__Identifier(
                port_, _platform.api2wire_String(idStr)),
        parseSuccessData: _wire2api_identifier,
        constMeta: kFromStrStaticMethodIdentifierConstMeta,
        argValues: [idStr],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kFromStrStaticMethodIdentifierConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "from_str__static_method__Identifier",
        argNames: ["idStr"],
      );

  Future<String> toStrMethodIdentifier(
          {required Identifier that, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_to_str__method__Identifier(
            port_, _platform.api2wire_box_autoadd_identifier(that)),
        parseSuccessData: _wire2api_String,
        constMeta: kToStrMethodIdentifierConstMeta,
        argValues: [that],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kToStrMethodIdentifierConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "to_str__method__Identifier",
        argNames: ["that"],
      );

  Future<DataAndSignature> newStaticMethodDataAndSignature(
          {required String data, required Signature signature, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner
            .wire_new__static_method__DataAndSignature(
                port_,
                _platform.api2wire_String(data),
                _platform.api2wire_box_autoadd_signature(signature)),
        parseSuccessData: (d) => _wire2api_data_and_signature(d),
        constMeta: kNewStaticMethodDataAndSignatureConstMeta,
        argValues: [data, signature],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodDataAndSignatureConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new__static_method__DataAndSignature",
            argNames: ["data", "signature"],
          );

// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  Action _wire2api_action(dynamic raw) {
    return Action.values[raw];
  }

  ActionRequired _wire2api_action_required(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ActionRequired(
      action: _wire2api_action(arr[0]),
      data: _wire2api_String(arr[1]),
      additionaData: _wire2api_String(arr[2]),
    );
  }

  Basic _wire2api_basic(dynamic raw) {
    return Basic.values[raw];
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  Digest _wire2api_box_autoadd_digest(dynamic raw) {
    return _wire2api_digest(raw);
  }

  PublicKey _wire2api_box_autoadd_public_key(dynamic raw) {
    return _wire2api_public_key(raw);
  }

  Signature _wire2api_box_autoadd_signature(dynamic raw) {
    return _wire2api_signature(raw);
  }

  Basic _wire2api_box_basic(dynamic raw) {
    return raw as Basic;
  }

  SelfAddressing _wire2api_box_self_addressing(dynamic raw) {
    return _wire2api_self_addressing(raw);
  }

  SelfSigning _wire2api_box_self_signing(dynamic raw) {
    return raw as SelfSigning;
  }

  Signature _wire2api_box_signature(dynamic raw) {
    return _wire2api_signature(raw);
  }

  Config _wire2api_config(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Config(
      initialOobis: _wire2api_String(arr[0]),
    );
  }

  DataAndSignature _wire2api_data_and_signature(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DataAndSignature(
      bridge: this,
      data: _wire2api_String(arr[0]),
      signature: _wire2api_box_signature(arr[1]),
    );
  }

  Digest _wire2api_digest(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Digest(
      bridge: this,
      derivation: _wire2api_box_self_addressing(arr[0]),
      digest: _wire2api_uint_8_list(arr[1]),
    );
  }

  GroupInception _wire2api_group_inception(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GroupInception(
      icpEvent: _wire2api_String(arr[0]),
      exchanges: _wire2api_StringList(arr[1]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  Identifier _wire2api_identifier(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return Identifier_Basic(
          _wire2api_box_autoadd_public_key(raw[1]),
        );
      case 1:
        return Identifier_SelfAddressing(
          _wire2api_box_autoadd_digest(raw[1]),
        );
      case 2:
        return Identifier_SelfSigning(
          _wire2api_box_autoadd_signature(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  List<ActionRequired> _wire2api_list_action_required(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_action_required).toList();
  }

  List<PublicKeySignaturePair> _wire2api_list_public_key_signature_pair(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_wire2api_public_key_signature_pair)
        .toList();
  }

  PublicKey _wire2api_public_key(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PublicKey(
      bridge: this,
      derivation: _wire2api_box_basic(arr[0]),
      publicKey: _wire2api_uint_8_list(arr[1]),
    );
  }

  PublicKeySignaturePair _wire2api_public_key_signature_pair(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PublicKeySignaturePair(
      key: _wire2api_public_key(arr[0]),
      signature: _wire2api_signature(arr[1]),
    );
  }

  SelfAddressing _wire2api_self_addressing(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return SelfAddressing_Blake3_256();
      case 1:
        return SelfAddressing_SHA3_256();
      case 2:
        return SelfAddressing_SHA2_256();
      case 3:
        return SelfAddressing_Blake3_512();
      case 4:
        return SelfAddressing_SHA3_512();
      case 5:
        return SelfAddressing_Blake2B512();
      case 6:
        return SelfAddressing_SHA2_512();
      case 7:
        return SelfAddressing_Blake2B256(
          _wire2api_uint_8_list(raw[1]),
        );
      case 8:
        return SelfAddressing_Blake2S256(
          _wire2api_uint_8_list(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  SelfSigning _wire2api_self_signing(dynamic raw) {
    return SelfSigning.values[raw];
  }

  Signature _wire2api_signature(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Signature(
      bridge: this,
      derivation: _wire2api_box_self_signing(arr[0]),
      signature: _wire2api_uint_8_list(arr[1]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
int api2wire_basic(Basic raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_self_signing(SelfSigning raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

class KeriDartPlatform extends FlutterRustBridgeBase<KeriDartWire> {
  KeriDartPlatform(ffi.DynamicLibrary dylib) : super(KeriDartWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_Config> api2wire_box_autoadd_config(Config raw) {
    final ptr = inner.new_box_autoadd_config_0();
    _api_fill_to_wire_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Digest> api2wire_box_autoadd_digest(Digest raw) {
    final ptr = inner.new_box_autoadd_digest_0();
    _api_fill_to_wire_digest(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Identifier> api2wire_box_autoadd_identifier(Identifier raw) {
    final ptr = inner.new_box_autoadd_identifier_0();
    _api_fill_to_wire_identifier(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_PublicKey> api2wire_box_autoadd_public_key(PublicKey raw) {
    final ptr = inner.new_box_autoadd_public_key_0();
    _api_fill_to_wire_public_key(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SelfAddressing> api2wire_box_autoadd_self_addressing(
      SelfAddressing raw) {
    final ptr = inner.new_box_autoadd_self_addressing_0();
    _api_fill_to_wire_self_addressing(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Signature> api2wire_box_autoadd_signature(Signature raw) {
    final ptr = inner.new_box_autoadd_signature_0();
    _api_fill_to_wire_signature(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_box_basic(Basic raw) {
    return inner.new_box_basic_0(api2wire_basic(raw));
  }

  @protected
  ffi.Pointer<wire_SelfAddressing> api2wire_box_self_addressing(
      SelfAddressing raw) {
    final ptr = inner.new_box_self_addressing_0();
    _api_fill_to_wire_self_addressing(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_box_self_signing(SelfSigning raw) {
    return inner.new_box_self_signing_0(api2wire_self_signing(raw));
  }

  @protected
  ffi.Pointer<wire_Signature> api2wire_box_signature(Signature raw) {
    final ptr = inner.new_box_signature_0();
    _api_fill_to_wire_signature(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_list_data_and_signature> api2wire_list_data_and_signature(
      List<DataAndSignature> raw) {
    final ans = inner.new_list_data_and_signature_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_data_and_signature(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_identifier> api2wire_list_identifier(
      List<Identifier> raw) {
    final ans = inner.new_list_identifier_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_identifier(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_public_key> api2wire_list_public_key(
      List<PublicKey> raw) {
    final ans = inner.new_list_public_key_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_public_key(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_Config> api2wire_opt_box_autoadd_config(Config? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_config(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_config(
      Config apiObj, ffi.Pointer<wire_Config> wireObj) {
    _api_fill_to_wire_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_digest(
      Digest apiObj, ffi.Pointer<wire_Digest> wireObj) {
    _api_fill_to_wire_digest(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_identifier(
      Identifier apiObj, ffi.Pointer<wire_Identifier> wireObj) {
    _api_fill_to_wire_identifier(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_public_key(
      PublicKey apiObj, ffi.Pointer<wire_PublicKey> wireObj) {
    _api_fill_to_wire_public_key(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_self_addressing(
      SelfAddressing apiObj, ffi.Pointer<wire_SelfAddressing> wireObj) {
    _api_fill_to_wire_self_addressing(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_signature(
      Signature apiObj, ffi.Pointer<wire_Signature> wireObj) {
    _api_fill_to_wire_signature(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_self_addressing(
      SelfAddressing apiObj, ffi.Pointer<wire_SelfAddressing> wireObj) {
    _api_fill_to_wire_self_addressing(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_signature(
      Signature apiObj, ffi.Pointer<wire_Signature> wireObj) {
    _api_fill_to_wire_signature(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_config(Config apiObj, wire_Config wireObj) {
    wireObj.initial_oobis = api2wire_String(apiObj.initialOobis);
  }

  void _api_fill_to_wire_data_and_signature(
      DataAndSignature apiObj, wire_DataAndSignature wireObj) {
    wireObj.data = api2wire_String(apiObj.data);
    wireObj.signature = api2wire_box_signature(apiObj.signature);
  }

  void _api_fill_to_wire_digest(Digest apiObj, wire_Digest wireObj) {
    wireObj.derivation = api2wire_box_self_addressing(apiObj.derivation);
    wireObj.digest = api2wire_uint_8_list(apiObj.digest);
  }

  void _api_fill_to_wire_identifier(
      Identifier apiObj, wire_Identifier wireObj) {
    if (apiObj is Identifier_Basic) {
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_Identifier_Basic();
      wireObj.kind.ref.Basic.ref.field0 =
          api2wire_box_autoadd_public_key(apiObj.field0);
      return;
    }
    if (apiObj is Identifier_SelfAddressing) {
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_Identifier_SelfAddressing();
      wireObj.kind.ref.SelfAddressing.ref.field0 =
          api2wire_box_autoadd_digest(apiObj.field0);
      return;
    }
    if (apiObj is Identifier_SelfSigning) {
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_Identifier_SelfSigning();
      wireObj.kind.ref.SelfSigning.ref.field0 =
          api2wire_box_autoadd_signature(apiObj.field0);
      return;
    }
  }

  void _api_fill_to_wire_opt_box_autoadd_config(
      Config? apiObj, ffi.Pointer<wire_Config> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_config(apiObj, wireObj);
  }

  void _api_fill_to_wire_public_key(PublicKey apiObj, wire_PublicKey wireObj) {
    wireObj.derivation = api2wire_box_basic(apiObj.derivation);
    wireObj.public_key = api2wire_uint_8_list(apiObj.publicKey);
  }

  void _api_fill_to_wire_self_addressing(
      SelfAddressing apiObj, wire_SelfAddressing wireObj) {
    if (apiObj is SelfAddressing_Blake3_256) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is SelfAddressing_SHA3_256) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is SelfAddressing_SHA2_256) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is SelfAddressing_Blake3_512) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is SelfAddressing_SHA3_512) {
      wireObj.tag = 4;
      return;
    }
    if (apiObj is SelfAddressing_Blake2B512) {
      wireObj.tag = 5;
      return;
    }
    if (apiObj is SelfAddressing_SHA2_512) {
      wireObj.tag = 6;
      return;
    }
    if (apiObj is SelfAddressing_Blake2B256) {
      wireObj.tag = 7;
      wireObj.kind = inner.inflate_SelfAddressing_Blake2B256();
      wireObj.kind.ref.Blake2B256.ref.field0 =
          api2wire_uint_8_list(apiObj.field0);
      return;
    }
    if (apiObj is SelfAddressing_Blake2S256) {
      wireObj.tag = 8;
      wireObj.kind = inner.inflate_SelfAddressing_Blake2S256();
      wireObj.kind.ref.Blake2S256.ref.field0 =
          api2wire_uint_8_list(apiObj.field0);
      return;
    }
  }

  void _api_fill_to_wire_signature(Signature apiObj, wire_Signature wireObj) {
    wireObj.derivation = api2wire_box_self_signing(apiObj.derivation);
    wireObj.signature = api2wire_uint_8_list(apiObj.signature);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class KeriDartWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  KeriDartWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  KeriDartWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  void wire_with_initial_oobis(
    int port_,
    ffi.Pointer<wire_Config> config,
    ffi.Pointer<wire_uint_8_list> oobis_json,
  ) {
    return _wire_with_initial_oobis(
      port_,
      config,
      oobis_json,
    );
  }

  late final _wire_with_initial_oobisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Config>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_with_initial_oobis');
  late final _wire_with_initial_oobis = _wire_with_initial_oobisPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_Config>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_init_kel(
    int port_,
    ffi.Pointer<wire_uint_8_list> input_app_dir,
    ffi.Pointer<wire_Config> optional_configs,
  ) {
    return _wire_init_kel(
      port_,
      input_app_dir,
      optional_configs,
    );
  }

  late final _wire_init_kelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Config>)>>('wire_init_kel');
  late final _wire_init_kel = _wire_init_kelPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Config>)>();

  void wire_incept(
    int port_,
    ffi.Pointer<wire_list_public_key> public_keys,
    ffi.Pointer<wire_list_public_key> next_pub_keys,
    ffi.Pointer<wire_StringList> witnesses,
    int witness_threshold,
  ) {
    return _wire_incept(
      port_,
      public_keys,
      next_pub_keys,
      witnesses,
      witness_threshold,
    );
  }

  late final _wire_inceptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_list_public_key>,
              ffi.Pointer<wire_list_public_key>,
              ffi.Pointer<wire_StringList>,
              ffi.Uint64)>>('wire_incept');
  late final _wire_incept = _wire_inceptPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_list_public_key>,
          ffi.Pointer<wire_list_public_key>,
          ffi.Pointer<wire_StringList>,
          int)>();

  void wire_finalize_inception(
    int port_,
    ffi.Pointer<wire_uint_8_list> event,
    ffi.Pointer<wire_Signature> signature,
  ) {
    return _wire_finalize_inception(
      port_,
      event,
      signature,
    );
  }

  late final _wire_finalize_inceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Signature>)>>('wire_finalize_inception');
  late final _wire_finalize_inception = _wire_finalize_inceptionPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Signature>)>();

  void wire_rotate(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_list_public_key> current_keys,
    ffi.Pointer<wire_list_public_key> new_next_keys,
    ffi.Pointer<wire_StringList> witness_to_add,
    ffi.Pointer<wire_StringList> witness_to_remove,
    int witness_threshold,
  ) {
    return _wire_rotate(
      port_,
      identifier,
      current_keys,
      new_next_keys,
      witness_to_add,
      witness_to_remove,
      witness_threshold,
    );
  }

  late final _wire_rotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_list_public_key>,
              ffi.Pointer<wire_list_public_key>,
              ffi.Pointer<wire_StringList>,
              ffi.Pointer<wire_StringList>,
              ffi.Uint64)>>('wire_rotate');
  late final _wire_rotate = _wire_rotatePtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_Identifier>,
          ffi.Pointer<wire_list_public_key>,
          ffi.Pointer<wire_list_public_key>,
          ffi.Pointer<wire_StringList>,
          ffi.Pointer<wire_StringList>,
          int)>();

  void wire_anchor(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_uint_8_list> data,
    ffi.Pointer<wire_SelfAddressing> algo,
  ) {
    return _wire_anchor(
      port_,
      identifier,
      data,
      algo,
    );
  }

  late final _wire_anchorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_SelfAddressing>)>>('wire_anchor');
  late final _wire_anchor = _wire_anchorPtr.asFunction<
      void Function(int, ffi.Pointer<wire_Identifier>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_SelfAddressing>)>();

  void wire_anchor_digest(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_StringList> sais,
  ) {
    return _wire_anchor_digest(
      port_,
      identifier,
      sais,
    );
  }

  late final _wire_anchor_digestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_StringList>)>>('wire_anchor_digest');
  late final _wire_anchor_digest = _wire_anchor_digestPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_Identifier>, ffi.Pointer<wire_StringList>)>();

  void wire_add_watcher(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_uint_8_list> watcher_oobi,
  ) {
    return _wire_add_watcher(
      port_,
      identifier,
      watcher_oobi,
    );
  }

  late final _wire_add_watcherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_add_watcher');
  late final _wire_add_watcher = _wire_add_watcherPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_Identifier>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_finalize_event(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_uint_8_list> event,
    ffi.Pointer<wire_Signature> signature,
  ) {
    return _wire_finalize_event(
      port_,
      identifier,
      event,
      signature,
    );
  }

  late final _wire_finalize_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Signature>)>>('wire_finalize_event');
  late final _wire_finalize_event = _wire_finalize_eventPtr.asFunction<
      void Function(int, ffi.Pointer<wire_Identifier>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Signature>)>();

  void wire_incept_group(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_list_identifier> participants,
    int signature_threshold,
    ffi.Pointer<wire_StringList> initial_witnesses,
    int witness_threshold,
  ) {
    return _wire_incept_group(
      port_,
      identifier,
      participants,
      signature_threshold,
      initial_witnesses,
      witness_threshold,
    );
  }

  late final _wire_incept_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_list_identifier>,
              ffi.Uint64,
              ffi.Pointer<wire_StringList>,
              ffi.Uint64)>>('wire_incept_group');
  late final _wire_incept_group = _wire_incept_groupPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_Identifier>,
          ffi.Pointer<wire_list_identifier>,
          int,
          ffi.Pointer<wire_StringList>,
          int)>();

  void wire_finalize_group_incept(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_uint_8_list> group_event,
    ffi.Pointer<wire_Signature> signature,
    ffi.Pointer<wire_list_data_and_signature> to_forward,
  ) {
    return _wire_finalize_group_incept(
      port_,
      identifier,
      group_event,
      signature,
      to_forward,
    );
  }

  late final _wire_finalize_group_inceptPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_Identifier>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_Signature>,
                  ffi.Pointer<wire_list_data_and_signature>)>>(
      'wire_finalize_group_incept');
  late final _wire_finalize_group_incept =
      _wire_finalize_group_inceptPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Signature>,
              ffi.Pointer<wire_list_data_and_signature>)>();

  void wire_query_mailbox(
    int port_,
    ffi.Pointer<wire_Identifier> who_ask,
    ffi.Pointer<wire_Identifier> about_who,
    ffi.Pointer<wire_StringList> witness,
  ) {
    return _wire_query_mailbox(
      port_,
      who_ask,
      about_who,
      witness,
    );
  }

  late final _wire_query_mailboxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_StringList>)>>('wire_query_mailbox');
  late final _wire_query_mailbox = _wire_query_mailboxPtr.asFunction<
      void Function(int, ffi.Pointer<wire_Identifier>,
          ffi.Pointer<wire_Identifier>, ffi.Pointer<wire_StringList>)>();

  void wire_finalize_mailbox_query(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_uint_8_list> query_event,
    ffi.Pointer<wire_Signature> signature,
  ) {
    return _wire_finalize_mailbox_query(
      port_,
      identifier,
      query_event,
      signature,
    );
  }

  late final _wire_finalize_mailbox_queryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Signature>)>>('wire_finalize_mailbox_query');
  late final _wire_finalize_mailbox_query =
      _wire_finalize_mailbox_queryPtr.asFunction<
          void Function(int, ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Signature>)>();

  void wire_resolve_oobi(
    int port_,
    ffi.Pointer<wire_uint_8_list> oobi_json,
  ) {
    return _wire_resolve_oobi(
      port_,
      oobi_json,
    );
  }

  late final _wire_resolve_oobiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_resolve_oobi');
  late final _wire_resolve_oobi = _wire_resolve_oobiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_query(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_uint_8_list> oobis_json,
  ) {
    return _wire_query(
      port_,
      identifier,
      oobis_json,
    );
  }

  late final _wire_queryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_query');
  late final _wire_query = _wire_queryPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_Identifier>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_process_stream(
    int port_,
    ffi.Pointer<wire_uint_8_list> stream,
  ) {
    return _wire_process_stream(
      port_,
      stream,
    );
  }

  late final _wire_process_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_process_stream');
  late final _wire_process_stream = _wire_process_streamPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_kel(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
  ) {
    return _wire_get_kel(
      port_,
      identifier,
    );
  }

  late final _wire_get_kelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_Identifier>)>>('wire_get_kel');
  late final _wire_get_kel = _wire_get_kelPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Identifier>)>();

  void wire_get_current_public_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> attachment,
  ) {
    return _wire_get_current_public_key(
      port_,
      attachment,
    );
  }

  late final _wire_get_current_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_current_public_key');
  late final _wire_get_current_public_key = _wire_get_current_public_keyPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_new__static_method__PublicKey(
    int port_,
    int kt,
    ffi.Pointer<wire_uint_8_list> key_b64,
  ) {
    return _wire_new__static_method__PublicKey(
      port_,
      kt,
      key_b64,
    );
  }

  late final _wire_new__static_method__PublicKeyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_new__static_method__PublicKey');
  late final _wire_new__static_method__PublicKey =
      _wire_new__static_method__PublicKeyPtr
          .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_new__static_method__Digest(
    int port_,
    ffi.Pointer<wire_SelfAddressing> dt,
    ffi.Pointer<wire_uint_8_list> digest_data,
  ) {
    return _wire_new__static_method__Digest(
      port_,
      dt,
      digest_data,
    );
  }

  late final _wire_new__static_method__DigestPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_SelfAddressing>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_new__static_method__Digest');
  late final _wire_new__static_method__Digest =
      _wire_new__static_method__DigestPtr.asFunction<
          void Function(int, ffi.Pointer<wire_SelfAddressing>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_new_from_hex__static_method__Signature(
    int port_,
    int st,
    ffi.Pointer<wire_uint_8_list> signature,
  ) {
    return _wire_new_from_hex__static_method__Signature(
      port_,
      st,
      signature,
    );
  }

  late final _wire_new_from_hex__static_method__SignaturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_new_from_hex__static_method__Signature');
  late final _wire_new_from_hex__static_method__Signature =
      _wire_new_from_hex__static_method__SignaturePtr
          .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_new_from_b64__static_method__Signature(
    int port_,
    int st,
    ffi.Pointer<wire_uint_8_list> signature,
  ) {
    return _wire_new_from_b64__static_method__Signature(
      port_,
      st,
      signature,
    );
  }

  late final _wire_new_from_b64__static_method__SignaturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_new_from_b64__static_method__Signature');
  late final _wire_new_from_b64__static_method__Signature =
      _wire_new_from_b64__static_method__SignaturePtr
          .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_from_str__static_method__Identifier(
    int port_,
    ffi.Pointer<wire_uint_8_list> id_str,
  ) {
    return _wire_from_str__static_method__Identifier(
      port_,
      id_str,
    );
  }

  late final _wire_from_str__static_method__IdentifierPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_from_str__static_method__Identifier');
  late final _wire_from_str__static_method__Identifier =
      _wire_from_str__static_method__IdentifierPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_to_str__method__Identifier(
    int port_,
    ffi.Pointer<wire_Identifier> that,
  ) {
    return _wire_to_str__method__Identifier(
      port_,
      that,
    );
  }

  late final _wire_to_str__method__IdentifierPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Identifier>)>>(
      'wire_to_str__method__Identifier');
  late final _wire_to_str__method__Identifier =
      _wire_to_str__method__IdentifierPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Identifier>)>();

  void wire_new__static_method__DataAndSignature(
    int port_,
    ffi.Pointer<wire_uint_8_list> data,
    ffi.Pointer<wire_Signature> signature,
  ) {
    return _wire_new__static_method__DataAndSignature(
      port_,
      data,
      signature,
    );
  }

  late final _wire_new__static_method__DataAndSignaturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_Signature>)>>(
      'wire_new__static_method__DataAndSignature');
  late final _wire_new__static_method__DataAndSignature =
      _wire_new__static_method__DataAndSignaturePtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Signature>)>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_Config> new_box_autoadd_config_0() {
    return _new_box_autoadd_config_0();
  }

  late final _new_box_autoadd_config_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Config> Function()>>(
          'new_box_autoadd_config_0');
  late final _new_box_autoadd_config_0 = _new_box_autoadd_config_0Ptr
      .asFunction<ffi.Pointer<wire_Config> Function()>();

  ffi.Pointer<wire_Digest> new_box_autoadd_digest_0() {
    return _new_box_autoadd_digest_0();
  }

  late final _new_box_autoadd_digest_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Digest> Function()>>(
          'new_box_autoadd_digest_0');
  late final _new_box_autoadd_digest_0 = _new_box_autoadd_digest_0Ptr
      .asFunction<ffi.Pointer<wire_Digest> Function()>();

  ffi.Pointer<wire_Identifier> new_box_autoadd_identifier_0() {
    return _new_box_autoadd_identifier_0();
  }

  late final _new_box_autoadd_identifier_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Identifier> Function()>>(
          'new_box_autoadd_identifier_0');
  late final _new_box_autoadd_identifier_0 = _new_box_autoadd_identifier_0Ptr
      .asFunction<ffi.Pointer<wire_Identifier> Function()>();

  ffi.Pointer<wire_PublicKey> new_box_autoadd_public_key_0() {
    return _new_box_autoadd_public_key_0();
  }

  late final _new_box_autoadd_public_key_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_PublicKey> Function()>>(
          'new_box_autoadd_public_key_0');
  late final _new_box_autoadd_public_key_0 = _new_box_autoadd_public_key_0Ptr
      .asFunction<ffi.Pointer<wire_PublicKey> Function()>();

  ffi.Pointer<wire_SelfAddressing> new_box_autoadd_self_addressing_0() {
    return _new_box_autoadd_self_addressing_0();
  }

  late final _new_box_autoadd_self_addressing_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_SelfAddressing> Function()>>(
          'new_box_autoadd_self_addressing_0');
  late final _new_box_autoadd_self_addressing_0 =
      _new_box_autoadd_self_addressing_0Ptr
          .asFunction<ffi.Pointer<wire_SelfAddressing> Function()>();

  ffi.Pointer<wire_Signature> new_box_autoadd_signature_0() {
    return _new_box_autoadd_signature_0();
  }

  late final _new_box_autoadd_signature_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Signature> Function()>>(
          'new_box_autoadd_signature_0');
  late final _new_box_autoadd_signature_0 = _new_box_autoadd_signature_0Ptr
      .asFunction<ffi.Pointer<wire_Signature> Function()>();

  ffi.Pointer<ffi.Int32> new_box_basic_0(
    int value,
  ) {
    return _new_box_basic_0(
      value,
    );
  }

  late final _new_box_basic_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>(
          'new_box_basic_0');
  late final _new_box_basic_0 =
      _new_box_basic_0Ptr.asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<wire_SelfAddressing> new_box_self_addressing_0() {
    return _new_box_self_addressing_0();
  }

  late final _new_box_self_addressing_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_SelfAddressing> Function()>>(
          'new_box_self_addressing_0');
  late final _new_box_self_addressing_0 = _new_box_self_addressing_0Ptr
      .asFunction<ffi.Pointer<wire_SelfAddressing> Function()>();

  ffi.Pointer<ffi.Int32> new_box_self_signing_0(
    int value,
  ) {
    return _new_box_self_signing_0(
      value,
    );
  }

  late final _new_box_self_signing_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>(
          'new_box_self_signing_0');
  late final _new_box_self_signing_0 = _new_box_self_signing_0Ptr
      .asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<wire_Signature> new_box_signature_0() {
    return _new_box_signature_0();
  }

  late final _new_box_signature_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Signature> Function()>>(
          'new_box_signature_0');
  late final _new_box_signature_0 = _new_box_signature_0Ptr
      .asFunction<ffi.Pointer<wire_Signature> Function()>();

  ffi.Pointer<wire_list_data_and_signature> new_list_data_and_signature_0(
    int len,
  ) {
    return _new_list_data_and_signature_0(
      len,
    );
  }

  late final _new_list_data_and_signature_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_data_and_signature> Function(
              ffi.Int32)>>('new_list_data_and_signature_0');
  late final _new_list_data_and_signature_0 = _new_list_data_and_signature_0Ptr
      .asFunction<ffi.Pointer<wire_list_data_and_signature> Function(int)>();

  ffi.Pointer<wire_list_identifier> new_list_identifier_0(
    int len,
  ) {
    return _new_list_identifier_0(
      len,
    );
  }

  late final _new_list_identifier_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_identifier> Function(
              ffi.Int32)>>('new_list_identifier_0');
  late final _new_list_identifier_0 = _new_list_identifier_0Ptr
      .asFunction<ffi.Pointer<wire_list_identifier> Function(int)>();

  ffi.Pointer<wire_list_public_key> new_list_public_key_0(
    int len,
  ) {
    return _new_list_public_key_0(
      len,
    );
  }

  late final _new_list_public_key_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_public_key> Function(
              ffi.Int32)>>('new_list_public_key_0');
  late final _new_list_public_key_0 = _new_list_public_key_0Ptr
      .asFunction<ffi.Pointer<wire_list_public_key> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<IdentifierKind> inflate_Identifier_Basic() {
    return _inflate_Identifier_Basic();
  }

  late final _inflate_Identifier_BasicPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<IdentifierKind> Function()>>(
          'inflate_Identifier_Basic');
  late final _inflate_Identifier_Basic = _inflate_Identifier_BasicPtr
      .asFunction<ffi.Pointer<IdentifierKind> Function()>();

  ffi.Pointer<IdentifierKind> inflate_Identifier_SelfAddressing() {
    return _inflate_Identifier_SelfAddressing();
  }

  late final _inflate_Identifier_SelfAddressingPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<IdentifierKind> Function()>>(
          'inflate_Identifier_SelfAddressing');
  late final _inflate_Identifier_SelfAddressing =
      _inflate_Identifier_SelfAddressingPtr
          .asFunction<ffi.Pointer<IdentifierKind> Function()>();

  ffi.Pointer<IdentifierKind> inflate_Identifier_SelfSigning() {
    return _inflate_Identifier_SelfSigning();
  }

  late final _inflate_Identifier_SelfSigningPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<IdentifierKind> Function()>>(
          'inflate_Identifier_SelfSigning');
  late final _inflate_Identifier_SelfSigning =
      _inflate_Identifier_SelfSigningPtr
          .asFunction<ffi.Pointer<IdentifierKind> Function()>();

  ffi.Pointer<SelfAddressingKind> inflate_SelfAddressing_Blake2B256() {
    return _inflate_SelfAddressing_Blake2B256();
  }

  late final _inflate_SelfAddressing_Blake2B256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SelfAddressingKind> Function()>>(
          'inflate_SelfAddressing_Blake2B256');
  late final _inflate_SelfAddressing_Blake2B256 =
      _inflate_SelfAddressing_Blake2B256Ptr
          .asFunction<ffi.Pointer<SelfAddressingKind> Function()>();

  ffi.Pointer<SelfAddressingKind> inflate_SelfAddressing_Blake2S256() {
    return _inflate_SelfAddressing_Blake2S256();
  }

  late final _inflate_SelfAddressing_Blake2S256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SelfAddressingKind> Function()>>(
          'inflate_SelfAddressing_Blake2S256');
  late final _inflate_SelfAddressing_Blake2S256 =
      _inflate_SelfAddressing_Blake2S256Ptr
          .asFunction<ffi.Pointer<SelfAddressingKind> Function()>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Config extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> initial_oobis;
}

class wire_PublicKey extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> derivation;

  external ffi.Pointer<wire_uint_8_list> public_key;
}

class wire_list_public_key extends ffi.Struct {
  external ffi.Pointer<wire_PublicKey> ptr;

  @ffi.Int32()
  external int len;
}

class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Signature extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> derivation;

  external ffi.Pointer<wire_uint_8_list> signature;
}

class wire_Identifier_Basic extends ffi.Struct {
  external ffi.Pointer<wire_PublicKey> field0;
}

class wire_SelfAddressing_Blake3_256 extends ffi.Opaque {}

class wire_SelfAddressing_SHA3_256 extends ffi.Opaque {}

class wire_SelfAddressing_SHA2_256 extends ffi.Opaque {}

class wire_SelfAddressing_Blake3_512 extends ffi.Opaque {}

class wire_SelfAddressing_SHA3_512 extends ffi.Opaque {}

class wire_SelfAddressing_Blake2B512 extends ffi.Opaque {}

class wire_SelfAddressing_SHA2_512 extends ffi.Opaque {}

class wire_SelfAddressing_Blake2B256 extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class wire_SelfAddressing_Blake2S256 extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class SelfAddressingKind extends ffi.Union {
  external ffi.Pointer<wire_SelfAddressing_Blake3_256> Blake3_256;

  external ffi.Pointer<wire_SelfAddressing_SHA3_256> SHA3_256;

  external ffi.Pointer<wire_SelfAddressing_SHA2_256> SHA2_256;

  external ffi.Pointer<wire_SelfAddressing_Blake3_512> Blake3_512;

  external ffi.Pointer<wire_SelfAddressing_SHA3_512> SHA3_512;

  external ffi.Pointer<wire_SelfAddressing_Blake2B512> Blake2B512;

  external ffi.Pointer<wire_SelfAddressing_SHA2_512> SHA2_512;

  external ffi.Pointer<wire_SelfAddressing_Blake2B256> Blake2B256;

  external ffi.Pointer<wire_SelfAddressing_Blake2S256> Blake2S256;
}

class wire_SelfAddressing extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<SelfAddressingKind> kind;
}

class wire_Digest extends ffi.Struct {
  external ffi.Pointer<wire_SelfAddressing> derivation;

  external ffi.Pointer<wire_uint_8_list> digest;
}

class wire_Identifier_SelfAddressing extends ffi.Struct {
  external ffi.Pointer<wire_Digest> field0;
}

class wire_Identifier_SelfSigning extends ffi.Struct {
  external ffi.Pointer<wire_Signature> field0;
}

class IdentifierKind extends ffi.Union {
  external ffi.Pointer<wire_Identifier_Basic> Basic;

  external ffi.Pointer<wire_Identifier_SelfAddressing> SelfAddressing;

  external ffi.Pointer<wire_Identifier_SelfSigning> SelfSigning;
}

class wire_Identifier extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<IdentifierKind> kind;
}

class wire_list_identifier extends ffi.Struct {
  external ffi.Pointer<wire_Identifier> ptr;

  @ffi.Int32()
  external int len;
}

class wire_DataAndSignature extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> data;

  external ffi.Pointer<wire_Signature> signature;
}

class wire_list_data_and_signature extends ffi.Struct {
  external ffi.Pointer<wire_DataAndSignature> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
