// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'dart:ffi' as ffi;

part 'bridge_generated.freezed.dart';

abstract class KeriDart {
  Future<PublicKey> newPublicKey(
      {required KeyType kt, required String keyB64UrlSafe, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewPublicKeyConstMeta;

  Future<Signature> signatureFromHex(
      {required SignatureType st, required String signature, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignatureFromHexConstMeta;

  Future<Signature> signatureFromB64(
      {required SignatureType st, required String signature, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignatureFromB64ConstMeta;

  Future<Config> withInitialOobis(
      {required Config config, required String oobisJson, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWithInitialOobisConstMeta;

  /// Helper function for tests. Enable to switch to use other database. Used to
  /// simulate using multiple devices.
  Future<bool> changeController({required String dbPath, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kChangeControllerConstMeta;

  Future<bool> initKel(
      {required String inputAppDir, Config? optionalConfigs, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitKelConstMeta;

  Future<String> incept(
      {required List<PublicKey> publicKeys,
      required List<PublicKey> nextPubKeys,
      required List<String> witnesses,
      required int witnessThreshold,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInceptConstMeta;

  Future<Identifier> finalizeInception(
      {required String event, required Signature signature, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFinalizeInceptionConstMeta;

  Future<String> rotate(
      {required Identifier identifier,
      required List<PublicKey> currentKeys,
      required List<PublicKey> newNextKeys,
      required List<String> witnessToAdd,
      required List<String> witnessToRemove,
      required int witnessThreshold,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRotateConstMeta;

  Future<String> anchor(
      {required Identifier identifier,
      required String data,
      required DigestType algo,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAnchorConstMeta;

  Future<String> anchorDigest(
      {required Identifier identifier,
      required List<String> sais,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAnchorDigestConstMeta;

  Future<String> addWatcher(
      {required Identifier identifier,
      required String watcherOobi,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddWatcherConstMeta;

  Future<bool> sendOobiToWatcher(
      {required Identifier identifier,
      required String oobisJson,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendOobiToWatcherConstMeta;

  Future<bool> finalizeEvent(
      {required Identifier identifier,
      required String event,
      required Signature signature,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFinalizeEventConstMeta;

  Future<bool> notifyWitnesses({required Identifier identifier, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNotifyWitnessesConstMeta;

  Future<bool> broadcastReceipts(
      {required Identifier identifier,
      required List<Identifier> witnessList,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBroadcastReceiptsConstMeta;

  Future<GroupInception> inceptGroup(
      {required Identifier identifier,
      required List<Identifier> participants,
      required int signatureThreshold,
      required List<String> initialWitnesses,
      required int witnessThreshold,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInceptGroupConstMeta;

  Future<Identifier> finalizeGroupIncept(
      {required Identifier identifier,
      required String groupEvent,
      required Signature signature,
      required List<DataAndSignature> toForward,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFinalizeGroupInceptConstMeta;

  Future<List<String>> queryMailbox(
      {required Identifier whoAsk,
      required Identifier aboutWho,
      required List<String> witness,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kQueryMailboxConstMeta;

  Future<List<String>> queryWatchers(
      {required Identifier whoAsk, required Identifier aboutWho, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kQueryWatchersConstMeta;

  Future<List<ActionRequired>> finalizeQuery(
      {required Identifier identifier,
      required String queryEvent,
      required Signature signature,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFinalizeQueryConstMeta;

  Future<bool> resolveOobi({required String oobiJson, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kResolveOobiConstMeta;

  Future<bool> processStream({required String stream, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kProcessStreamConstMeta;

  Future<String> getKel({required Identifier identifier, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetKelConstMeta;

  Future<String> toCesrSignature(
      {required Identifier identifier,
      required Signature signature,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kToCesrSignatureConstMeta;

  Future<String> signToCesr(
      {required Identifier identifier,
      required String data,
      required Signature signature,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignToCesrConstMeta;

  /// Splits parsed elements from stream into oobis to resolve and other signed
  /// data.
  Future<SplittingResult> splitOobisAndData(
      {required String stream, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSplitOobisAndDataConstMeta;

  Future<bool> verifyFromCesr({required String stream, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVerifyFromCesrConstMeta;

  Future<RegistryData> inceptRegistry(
      {required Identifier identifier, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInceptRegistryConstMeta;

  Future<IssuanceData> issueCredential(
      {required Identifier identifier,
      required String credential,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIssueCredentialConstMeta;

  Future<String> revokeCredential(
      {required Identifier identifier,
      required String credentialSaid,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRevokeCredentialConstMeta;

  Future<String> queryTel(
      {required Identifier identifier,
      required String registryId,
      required String credentialSaid,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kQueryTelConstMeta;

  Future<bool> finalizeTelQuery(
      {required Identifier identifier,
      required String queryEvent,
      required Signature signature,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFinalizeTelQueryConstMeta;

  Future<String?> getCredentialState(
      {required Identifier identifier,
      required String credentialSaid,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetCredentialStateConstMeta;

  Future<bool> notifyBackers({required Identifier identifier, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNotifyBackersConstMeta;

  Future<String> addMessagebox(
      {required Identifier identifier,
      required String messageboxOobi,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddMessageboxConstMeta;

  Future<List<String>> getMessagebox({required String whose, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetMessageboxConstMeta;

  Future<Identifier> newFromStrStaticMethodIdentifier(
      {required String idStr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewFromStrStaticMethodIdentifierConstMeta;

  Future<String> toStrMethodIdentifier(
      {required Identifier that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kToStrMethodIdentifierConstMeta;

  Future<DataAndSignature> newStaticMethodDataAndSignature(
      {required String data, required Signature signature, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodDataAndSignatureConstMeta;
}

enum Action {
  MultisigRequest,
  DelegationRequest,
}

class ActionRequired {
  final Action action;
  final String data;
  final String additionaData;

  const ActionRequired({
    required this.action,
    required this.data,
    required this.additionaData,
  });
}

class Config {
  final String initialOobis;

  const Config({
    required this.initialOobis,
  });
}

class DataAndSignature {
  final KeriDart bridge;
  final String data;
  final Signature signature;

  const DataAndSignature({
    required this.bridge,
    required this.data,
    required this.signature,
  });

  static Future<DataAndSignature> newDataAndSignature(
          {required KeriDart bridge,
          required String data,
          required Signature signature,
          dynamic hint}) =>
      bridge.newStaticMethodDataAndSignature(
          data: data, signature: signature, hint: hint);
}

@freezed
sealed class DigestType with _$DigestType {
  const factory DigestType.blake3256() = DigestType_Blake3_256;
  const factory DigestType.sha3256() = DigestType_SHA3_256;
  const factory DigestType.sha2256() = DigestType_SHA2_256;
  const factory DigestType.blake3512() = DigestType_Blake3_512;
  const factory DigestType.sha3512() = DigestType_SHA3_512;
  const factory DigestType.blake2B512() = DigestType_Blake2B512;
  const factory DigestType.sha2512() = DigestType_SHA2_512;
  const factory DigestType.blake2B256(
    Uint8List field0,
  ) = DigestType_Blake2B256;
  const factory DigestType.blake2S256(
    Uint8List field0,
  ) = DigestType_Blake2S256;
}

/// Struct for collecting data that need to be signed: generated event and
/// exchange messages that are needed to forward multisig request to other group
/// participants.
class GroupInception {
  final String icpEvent;
  final List<String> exchanges;

  const GroupInception({
    required this.icpEvent,
    required this.exchanges,
  });
}

class Identifier {
  final KeriDart bridge;
  final String id;

  const Identifier({
    required this.bridge,
    required this.id,
  });

  static Future<Identifier> newFromStr(
          {required KeriDart bridge, required String idStr, dynamic hint}) =>
      bridge.newFromStrStaticMethodIdentifier(idStr: idStr, hint: hint);

  Future<String> toStr({dynamic hint}) => bridge.toStrMethodIdentifier(
        that: this,
      );
}

class IssuanceData {
  final String vcId;
  final String ixn;

  const IssuanceData({
    required this.vcId,
    required this.ixn,
  });
}

enum KeyType {
  ECDSAsecp256k1Nontrans,
  ECDSAsecp256k1,
  Ed25519Nontrans,
  Ed25519,
  Ed448Nontrans,
  Ed448,
  X25519,
  X448,
}

class PublicKey {
  final KeyType derivation;
  final Uint8List publicKey;

  const PublicKey({
    required this.derivation,
    required this.publicKey,
  });
}

class RegistryData {
  final String registryId;
  final String ixn;

  const RegistryData({
    required this.registryId,
    required this.ixn,
  });
}

class Signature {
  final SignatureType derivation;
  final Uint8List signature;

  const Signature({
    required this.derivation,
    required this.signature,
  });
}

enum SignatureType {
  Ed25519Sha512,
  ECDSAsecp256k1Sha256,
  Ed448,
}

class SplittingResult {
  final List<String> oobis;
  final List<String> credentials;

  const SplittingResult({
    required this.oobis,
    required this.credentials,
  });
}

class KeriDartImpl implements KeriDart {
  final KeriDartPlatform _platform;
  factory KeriDartImpl(ExternalLibrary dylib) =>
      KeriDartImpl.raw(KeriDartPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory KeriDartImpl.wasm(FutureOr<WasmModule> module) =>
      KeriDartImpl(module as ExternalLibrary);
  KeriDartImpl.raw(this._platform);
  Future<PublicKey> newPublicKey(
      {required KeyType kt, required String keyB64UrlSafe, dynamic hint}) {
    var arg0 = api2wire_key_type(kt);
    var arg1 = _platform.api2wire_String(keyB64UrlSafe);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_new_public_key(port_, arg0, arg1),
      parseSuccessData: _wire2api_public_key,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kNewPublicKeyConstMeta,
      argValues: [kt, keyB64UrlSafe],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewPublicKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new_public_key",
        argNames: ["kt", "keyB64UrlSafe"],
      );

  Future<Signature> signatureFromHex(
      {required SignatureType st, required String signature, dynamic hint}) {
    var arg0 = api2wire_signature_type(st);
    var arg1 = _platform.api2wire_String(signature);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_signature_from_hex(port_, arg0, arg1),
      parseSuccessData: _wire2api_signature,
      parseErrorData: null,
      constMeta: kSignatureFromHexConstMeta,
      argValues: [st, signature],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignatureFromHexConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "signature_from_hex",
        argNames: ["st", "signature"],
      );

  Future<Signature> signatureFromB64(
      {required SignatureType st, required String signature, dynamic hint}) {
    var arg0 = api2wire_signature_type(st);
    var arg1 = _platform.api2wire_String(signature);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_signature_from_b64(port_, arg0, arg1),
      parseSuccessData: _wire2api_signature,
      parseErrorData: null,
      constMeta: kSignatureFromB64ConstMeta,
      argValues: [st, signature],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignatureFromB64ConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "signature_from_b64",
        argNames: ["st", "signature"],
      );

  Future<Config> withInitialOobis(
      {required Config config, required String oobisJson, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_config(config);
    var arg1 = _platform.api2wire_String(oobisJson);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_with_initial_oobis(port_, arg0, arg1),
      parseSuccessData: _wire2api_config,
      parseErrorData: null,
      constMeta: kWithInitialOobisConstMeta,
      argValues: [config, oobisJson],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kWithInitialOobisConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "with_initial_oobis",
        argNames: ["config", "oobisJson"],
      );

  Future<bool> changeController({required String dbPath, dynamic hint}) {
    var arg0 = _platform.api2wire_String(dbPath);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_change_controller(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kChangeControllerConstMeta,
      argValues: [dbPath],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kChangeControllerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "change_controller",
        argNames: ["dbPath"],
      );

  Future<bool> initKel(
      {required String inputAppDir, Config? optionalConfigs, dynamic hint}) {
    var arg0 = _platform.api2wire_String(inputAppDir);
    var arg1 = _platform.api2wire_opt_box_autoadd_config(optionalConfigs);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_kel(port_, arg0, arg1),
      parseSuccessData: _wire2api_bool,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kInitKelConstMeta,
      argValues: [inputAppDir, optionalConfigs],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitKelConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_kel",
        argNames: ["inputAppDir", "optionalConfigs"],
      );

  Future<String> incept(
      {required List<PublicKey> publicKeys,
      required List<PublicKey> nextPubKeys,
      required List<String> witnesses,
      required int witnessThreshold,
      dynamic hint}) {
    var arg0 = _platform.api2wire_list_public_key(publicKeys);
    var arg1 = _platform.api2wire_list_public_key(nextPubKeys);
    var arg2 = _platform.api2wire_StringList(witnesses);
    var arg3 = _platform.api2wire_u64(witnessThreshold);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_incept(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kInceptConstMeta,
      argValues: [publicKeys, nextPubKeys, witnesses, witnessThreshold],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInceptConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "incept",
        argNames: [
          "publicKeys",
          "nextPubKeys",
          "witnesses",
          "witnessThreshold"
        ],
      );

  Future<Identifier> finalizeInception(
      {required String event, required Signature signature, dynamic hint}) {
    var arg0 = _platform.api2wire_String(event);
    var arg1 = _platform.api2wire_box_autoadd_signature(signature);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_finalize_inception(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_identifier(d),
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kFinalizeInceptionConstMeta,
      argValues: [event, signature],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFinalizeInceptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "finalize_inception",
        argNames: ["event", "signature"],
      );

  Future<String> rotate(
      {required Identifier identifier,
      required List<PublicKey> currentKeys,
      required List<PublicKey> newNextKeys,
      required List<String> witnessToAdd,
      required List<String> witnessToRemove,
      required int witnessThreshold,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(identifier);
    var arg1 = _platform.api2wire_list_public_key(currentKeys);
    var arg2 = _platform.api2wire_list_public_key(newNextKeys);
    var arg3 = _platform.api2wire_StringList(witnessToAdd);
    var arg4 = _platform.api2wire_StringList(witnessToRemove);
    var arg5 = _platform.api2wire_u64(witnessThreshold);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_rotate(port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kRotateConstMeta,
      argValues: [
        identifier,
        currentKeys,
        newNextKeys,
        witnessToAdd,
        witnessToRemove,
        witnessThreshold
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRotateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "rotate",
        argNames: [
          "identifier",
          "currentKeys",
          "newNextKeys",
          "witnessToAdd",
          "witnessToRemove",
          "witnessThreshold"
        ],
      );

  Future<String> anchor(
      {required Identifier identifier,
      required String data,
      required DigestType algo,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(identifier);
    var arg1 = _platform.api2wire_String(data);
    var arg2 = _platform.api2wire_box_autoadd_digest_type(algo);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_anchor(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kAnchorConstMeta,
      argValues: [identifier, data, algo],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAnchorConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "anchor",
        argNames: ["identifier", "data", "algo"],
      );

  Future<String> anchorDigest(
      {required Identifier identifier,
      required List<String> sais,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(identifier);
    var arg1 = _platform.api2wire_StringList(sais);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_anchor_digest(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kAnchorDigestConstMeta,
      argValues: [identifier, sais],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAnchorDigestConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "anchor_digest",
        argNames: ["identifier", "sais"],
      );

  Future<String> addWatcher(
      {required Identifier identifier,
      required String watcherOobi,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(identifier);
    var arg1 = _platform.api2wire_String(watcherOobi);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_add_watcher(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kAddWatcherConstMeta,
      argValues: [identifier, watcherOobi],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddWatcherConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add_watcher",
        argNames: ["identifier", "watcherOobi"],
      );

  Future<bool> sendOobiToWatcher(
      {required Identifier identifier,
      required String oobisJson,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(identifier);
    var arg1 = _platform.api2wire_String(oobisJson);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_send_oobi_to_watcher(port_, arg0, arg1),
      parseSuccessData: _wire2api_bool,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kSendOobiToWatcherConstMeta,
      argValues: [identifier, oobisJson],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendOobiToWatcherConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "send_oobi_to_watcher",
        argNames: ["identifier", "oobisJson"],
      );

  Future<bool> finalizeEvent(
      {required Identifier identifier,
      required String event,
      required Signature signature,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(identifier);
    var arg1 = _platform.api2wire_String(event);
    var arg2 = _platform.api2wire_box_autoadd_signature(signature);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_finalize_event(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_bool,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kFinalizeEventConstMeta,
      argValues: [identifier, event, signature],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFinalizeEventConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "finalize_event",
        argNames: ["identifier", "event", "signature"],
      );

  Future<bool> notifyWitnesses({required Identifier identifier, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(identifier);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_notify_witnesses(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kNotifyWitnessesConstMeta,
      argValues: [identifier],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNotifyWitnessesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "notify_witnesses",
        argNames: ["identifier"],
      );

  Future<bool> broadcastReceipts(
      {required Identifier identifier,
      required List<Identifier> witnessList,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(identifier);
    var arg1 = _platform.api2wire_list_identifier(witnessList);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_broadcast_receipts(port_, arg0, arg1),
      parseSuccessData: _wire2api_bool,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kBroadcastReceiptsConstMeta,
      argValues: [identifier, witnessList],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBroadcastReceiptsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "broadcast_receipts",
        argNames: ["identifier", "witnessList"],
      );

  Future<GroupInception> inceptGroup(
      {required Identifier identifier,
      required List<Identifier> participants,
      required int signatureThreshold,
      required List<String> initialWitnesses,
      required int witnessThreshold,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(identifier);
    var arg1 = _platform.api2wire_list_identifier(participants);
    var arg2 = _platform.api2wire_u64(signatureThreshold);
    var arg3 = _platform.api2wire_StringList(initialWitnesses);
    var arg4 = _platform.api2wire_u64(witnessThreshold);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_incept_group(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_group_inception,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kInceptGroupConstMeta,
      argValues: [
        identifier,
        participants,
        signatureThreshold,
        initialWitnesses,
        witnessThreshold
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInceptGroupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "incept_group",
        argNames: [
          "identifier",
          "participants",
          "signatureThreshold",
          "initialWitnesses",
          "witnessThreshold"
        ],
      );

  Future<Identifier> finalizeGroupIncept(
      {required Identifier identifier,
      required String groupEvent,
      required Signature signature,
      required List<DataAndSignature> toForward,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(identifier);
    var arg1 = _platform.api2wire_String(groupEvent);
    var arg2 = _platform.api2wire_box_autoadd_signature(signature);
    var arg3 = _platform.api2wire_list_data_and_signature(toForward);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_finalize_group_incept(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: (d) => _wire2api_identifier(d),
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kFinalizeGroupInceptConstMeta,
      argValues: [identifier, groupEvent, signature, toForward],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFinalizeGroupInceptConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "finalize_group_incept",
        argNames: ["identifier", "groupEvent", "signature", "toForward"],
      );

  Future<List<String>> queryMailbox(
      {required Identifier whoAsk,
      required Identifier aboutWho,
      required List<String> witness,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(whoAsk);
    var arg1 = _platform.api2wire_box_autoadd_identifier(aboutWho);
    var arg2 = _platform.api2wire_StringList(witness);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_query_mailbox(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_StringList,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kQueryMailboxConstMeta,
      argValues: [whoAsk, aboutWho, witness],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kQueryMailboxConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "query_mailbox",
        argNames: ["whoAsk", "aboutWho", "witness"],
      );

  Future<List<String>> queryWatchers(
      {required Identifier whoAsk,
      required Identifier aboutWho,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(whoAsk);
    var arg1 = _platform.api2wire_box_autoadd_identifier(aboutWho);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_query_watchers(port_, arg0, arg1),
      parseSuccessData: _wire2api_StringList,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kQueryWatchersConstMeta,
      argValues: [whoAsk, aboutWho],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kQueryWatchersConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "query_watchers",
        argNames: ["whoAsk", "aboutWho"],
      );

  Future<List<ActionRequired>> finalizeQuery(
      {required Identifier identifier,
      required String queryEvent,
      required Signature signature,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(identifier);
    var arg1 = _platform.api2wire_String(queryEvent);
    var arg2 = _platform.api2wire_box_autoadd_signature(signature);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_finalize_query(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_list_action_required,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kFinalizeQueryConstMeta,
      argValues: [identifier, queryEvent, signature],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFinalizeQueryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "finalize_query",
        argNames: ["identifier", "queryEvent", "signature"],
      );

  Future<bool> resolveOobi({required String oobiJson, dynamic hint}) {
    var arg0 = _platform.api2wire_String(oobiJson);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_resolve_oobi(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kResolveOobiConstMeta,
      argValues: [oobiJson],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kResolveOobiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "resolve_oobi",
        argNames: ["oobiJson"],
      );

  Future<bool> processStream({required String stream, dynamic hint}) {
    var arg0 = _platform.api2wire_String(stream);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_process_stream(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kProcessStreamConstMeta,
      argValues: [stream],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kProcessStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "process_stream",
        argNames: ["stream"],
      );

  Future<String> getKel({required Identifier identifier, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(identifier);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_kel(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kGetKelConstMeta,
      argValues: [identifier],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetKelConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_kel",
        argNames: ["identifier"],
      );

  Future<String> toCesrSignature(
      {required Identifier identifier,
      required Signature signature,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(identifier);
    var arg1 = _platform.api2wire_box_autoadd_signature(signature);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_to_cesr_signature(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kToCesrSignatureConstMeta,
      argValues: [identifier, signature],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kToCesrSignatureConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "to_cesr_signature",
        argNames: ["identifier", "signature"],
      );

  Future<String> signToCesr(
      {required Identifier identifier,
      required String data,
      required Signature signature,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(identifier);
    var arg1 = _platform.api2wire_String(data);
    var arg2 = _platform.api2wire_box_autoadd_signature(signature);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_sign_to_cesr(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kSignToCesrConstMeta,
      argValues: [identifier, data, signature],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignToCesrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sign_to_cesr",
        argNames: ["identifier", "data", "signature"],
      );

  Future<SplittingResult> splitOobisAndData(
      {required String stream, dynamic hint}) {
    var arg0 = _platform.api2wire_String(stream);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_split_oobis_and_data(port_, arg0),
      parseSuccessData: _wire2api_splitting_result,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kSplitOobisAndDataConstMeta,
      argValues: [stream],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSplitOobisAndDataConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "split_oobis_and_data",
        argNames: ["stream"],
      );

  Future<bool> verifyFromCesr({required String stream, dynamic hint}) {
    var arg0 = _platform.api2wire_String(stream);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_verify_from_cesr(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kVerifyFromCesrConstMeta,
      argValues: [stream],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVerifyFromCesrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "verify_from_cesr",
        argNames: ["stream"],
      );

  Future<RegistryData> inceptRegistry(
      {required Identifier identifier, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(identifier);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_incept_registry(port_, arg0),
      parseSuccessData: _wire2api_registry_data,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kInceptRegistryConstMeta,
      argValues: [identifier],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInceptRegistryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "incept_registry",
        argNames: ["identifier"],
      );

  Future<IssuanceData> issueCredential(
      {required Identifier identifier,
      required String credential,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(identifier);
    var arg1 = _platform.api2wire_String(credential);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_issue_credential(port_, arg0, arg1),
      parseSuccessData: _wire2api_issuance_data,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kIssueCredentialConstMeta,
      argValues: [identifier, credential],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIssueCredentialConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "issue_credential",
        argNames: ["identifier", "credential"],
      );

  Future<String> revokeCredential(
      {required Identifier identifier,
      required String credentialSaid,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(identifier);
    var arg1 = _platform.api2wire_String(credentialSaid);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_revoke_credential(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kRevokeCredentialConstMeta,
      argValues: [identifier, credentialSaid],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRevokeCredentialConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "revoke_credential",
        argNames: ["identifier", "credentialSaid"],
      );

  Future<String> queryTel(
      {required Identifier identifier,
      required String registryId,
      required String credentialSaid,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(identifier);
    var arg1 = _platform.api2wire_String(registryId);
    var arg2 = _platform.api2wire_String(credentialSaid);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_query_tel(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kQueryTelConstMeta,
      argValues: [identifier, registryId, credentialSaid],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kQueryTelConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "query_tel",
        argNames: ["identifier", "registryId", "credentialSaid"],
      );

  Future<bool> finalizeTelQuery(
      {required Identifier identifier,
      required String queryEvent,
      required Signature signature,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(identifier);
    var arg1 = _platform.api2wire_String(queryEvent);
    var arg2 = _platform.api2wire_box_autoadd_signature(signature);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_finalize_tel_query(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_bool,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kFinalizeTelQueryConstMeta,
      argValues: [identifier, queryEvent, signature],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFinalizeTelQueryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "finalize_tel_query",
        argNames: ["identifier", "queryEvent", "signature"],
      );

  Future<String?> getCredentialState(
      {required Identifier identifier,
      required String credentialSaid,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(identifier);
    var arg1 = _platform.api2wire_String(credentialSaid);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_credential_state(port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kGetCredentialStateConstMeta,
      argValues: [identifier, credentialSaid],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetCredentialStateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_credential_state",
        argNames: ["identifier", "credentialSaid"],
      );

  Future<bool> notifyBackers({required Identifier identifier, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(identifier);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_notify_backers(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kNotifyBackersConstMeta,
      argValues: [identifier],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNotifyBackersConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "notify_backers",
        argNames: ["identifier"],
      );

  Future<String> addMessagebox(
      {required Identifier identifier,
      required String messageboxOobi,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(identifier);
    var arg1 = _platform.api2wire_String(messageboxOobi);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_add_messagebox(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kAddMessageboxConstMeta,
      argValues: [identifier, messageboxOobi],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddMessageboxConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add_messagebox",
        argNames: ["identifier", "messageboxOobi"],
      );

  Future<List<String>> getMessagebox({required String whose, dynamic hint}) {
    var arg0 = _platform.api2wire_String(whose);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_messagebox(port_, arg0),
      parseSuccessData: _wire2api_StringList,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kGetMessageboxConstMeta,
      argValues: [whose],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetMessageboxConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_messagebox",
        argNames: ["whose"],
      );

  Future<Identifier> newFromStrStaticMethodIdentifier(
      {required String idStr, dynamic hint}) {
    var arg0 = _platform.api2wire_String(idStr);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new_from_str__static_method__Identifier(port_, arg0),
      parseSuccessData: (d) => _wire2api_identifier(d),
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kNewFromStrStaticMethodIdentifierConstMeta,
      argValues: [idStr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewFromStrStaticMethodIdentifierConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new_from_str__static_method__Identifier",
            argNames: ["idStr"],
          );

  Future<String> toStrMethodIdentifier(
      {required Identifier that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_identifier(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_to_str__method__Identifier(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kToStrMethodIdentifierConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kToStrMethodIdentifierConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "to_str__method__Identifier",
        argNames: ["that"],
      );

  Future<DataAndSignature> newStaticMethodDataAndSignature(
      {required String data, required Signature signature, dynamic hint}) {
    var arg0 = _platform.api2wire_String(data);
    var arg1 = _platform.api2wire_box_autoadd_signature(signature);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new__static_method__DataAndSignature(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_data_and_signature(d),
      parseErrorData: null,
      constMeta: kNewStaticMethodDataAndSignatureConstMeta,
      argValues: [data, signature],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewStaticMethodDataAndSignatureConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new__static_method__DataAndSignature",
            argNames: ["data", "signature"],
          );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  FrbAnyhowException _wire2api_FrbAnyhowException(dynamic raw) {
    return FrbAnyhowException(raw as String);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  Action _wire2api_action(dynamic raw) {
    return Action.values[raw as int];
  }

  ActionRequired _wire2api_action_required(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ActionRequired(
      action: _wire2api_action(arr[0]),
      data: _wire2api_String(arr[1]),
      additionaData: _wire2api_String(arr[2]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  Signature _wire2api_box_signature(dynamic raw) {
    return _wire2api_signature(raw);
  }

  Config _wire2api_config(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Config(
      initialOobis: _wire2api_String(arr[0]),
    );
  }

  DataAndSignature _wire2api_data_and_signature(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DataAndSignature(
      bridge: this,
      data: _wire2api_String(arr[0]),
      signature: _wire2api_box_signature(arr[1]),
    );
  }

  GroupInception _wire2api_group_inception(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GroupInception(
      icpEvent: _wire2api_String(arr[0]),
      exchanges: _wire2api_StringList(arr[1]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  Identifier _wire2api_identifier(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Identifier(
      bridge: this,
      id: _wire2api_String(arr[0]),
    );
  }

  IssuanceData _wire2api_issuance_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return IssuanceData(
      vcId: _wire2api_String(arr[0]),
      ixn: _wire2api_String(arr[1]),
    );
  }

  KeyType _wire2api_key_type(dynamic raw) {
    return KeyType.values[raw as int];
  }

  List<ActionRequired> _wire2api_list_action_required(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_action_required).toList();
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  PublicKey _wire2api_public_key(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PublicKey(
      derivation: _wire2api_key_type(arr[0]),
      publicKey: _wire2api_uint_8_list(arr[1]),
    );
  }

  RegistryData _wire2api_registry_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return RegistryData(
      registryId: _wire2api_String(arr[0]),
      ixn: _wire2api_String(arr[1]),
    );
  }

  Signature _wire2api_signature(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Signature(
      derivation: _wire2api_signature_type(arr[0]),
      signature: _wire2api_uint_8_list(arr[1]),
    );
  }

  SignatureType _wire2api_signature_type(dynamic raw) {
    return SignatureType.values[raw as int];
  }

  SplittingResult _wire2api_splitting_result(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SplittingResult(
      oobis: _wire2api_StringList(arr[0]),
      credentials: _wire2api_StringList(arr[1]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_key_type(KeyType raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_signature_type(SignatureType raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class KeriDartPlatform extends FlutterRustBridgeBase<KeriDartWire> {
  KeriDartPlatform(ffi.DynamicLibrary dylib) : super(KeriDartWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_Config> api2wire_box_autoadd_config(Config raw) {
    final ptr = inner.new_box_autoadd_config_0();
    _api_fill_to_wire_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_DigestType> api2wire_box_autoadd_digest_type(
      DigestType raw) {
    final ptr = inner.new_box_autoadd_digest_type_0();
    _api_fill_to_wire_digest_type(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Identifier> api2wire_box_autoadd_identifier(Identifier raw) {
    final ptr = inner.new_box_autoadd_identifier_0();
    _api_fill_to_wire_identifier(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Signature> api2wire_box_autoadd_signature(Signature raw) {
    final ptr = inner.new_box_autoadd_signature_0();
    _api_fill_to_wire_signature(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Signature> api2wire_box_signature(Signature raw) {
    final ptr = inner.new_box_signature_0();
    _api_fill_to_wire_signature(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_list_data_and_signature> api2wire_list_data_and_signature(
      List<DataAndSignature> raw) {
    final ans = inner.new_list_data_and_signature_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_data_and_signature(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_identifier> api2wire_list_identifier(
      List<Identifier> raw) {
    final ans = inner.new_list_identifier_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_identifier(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_public_key> api2wire_list_public_key(
      List<PublicKey> raw) {
    final ans = inner.new_list_public_key_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_public_key(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_Config> api2wire_opt_box_autoadd_config(Config? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_config(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_config(
      Config apiObj, ffi.Pointer<wire_Config> wireObj) {
    _api_fill_to_wire_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_digest_type(
      DigestType apiObj, ffi.Pointer<wire_DigestType> wireObj) {
    _api_fill_to_wire_digest_type(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_identifier(
      Identifier apiObj, ffi.Pointer<wire_Identifier> wireObj) {
    _api_fill_to_wire_identifier(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_signature(
      Signature apiObj, ffi.Pointer<wire_Signature> wireObj) {
    _api_fill_to_wire_signature(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_signature(
      Signature apiObj, ffi.Pointer<wire_Signature> wireObj) {
    _api_fill_to_wire_signature(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_config(Config apiObj, wire_Config wireObj) {
    wireObj.initial_oobis = api2wire_String(apiObj.initialOobis);
  }

  void _api_fill_to_wire_data_and_signature(
      DataAndSignature apiObj, wire_DataAndSignature wireObj) {
    wireObj.data = api2wire_String(apiObj.data);
    wireObj.signature = api2wire_box_signature(apiObj.signature);
  }

  void _api_fill_to_wire_digest_type(
      DigestType apiObj, wire_DigestType wireObj) {
    if (apiObj is DigestType_Blake3_256) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is DigestType_SHA3_256) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is DigestType_SHA2_256) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is DigestType_Blake3_512) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is DigestType_SHA3_512) {
      wireObj.tag = 4;
      return;
    }
    if (apiObj is DigestType_Blake2B512) {
      wireObj.tag = 5;
      return;
    }
    if (apiObj is DigestType_SHA2_512) {
      wireObj.tag = 6;
      return;
    }
    if (apiObj is DigestType_Blake2B256) {
      var pre_field0 = api2wire_uint_8_list(apiObj.field0);
      wireObj.tag = 7;
      wireObj.kind = inner.inflate_DigestType_Blake2B256();
      wireObj.kind.ref.Blake2B256.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is DigestType_Blake2S256) {
      var pre_field0 = api2wire_uint_8_list(apiObj.field0);
      wireObj.tag = 8;
      wireObj.kind = inner.inflate_DigestType_Blake2S256();
      wireObj.kind.ref.Blake2S256.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_identifier(
      Identifier apiObj, wire_Identifier wireObj) {
    wireObj.id = api2wire_String(apiObj.id);
  }

  void _api_fill_to_wire_opt_box_autoadd_config(
      Config? apiObj, ffi.Pointer<wire_Config> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_config(apiObj, wireObj);
  }

  void _api_fill_to_wire_public_key(PublicKey apiObj, wire_PublicKey wireObj) {
    wireObj.derivation = api2wire_key_type(apiObj.derivation);
    wireObj.public_key = api2wire_uint_8_list(apiObj.publicKey);
  }

  void _api_fill_to_wire_signature(Signature apiObj, wire_Signature wireObj) {
    wireObj.derivation = api2wire_signature_type(apiObj.derivation);
    wireObj.signature = api2wire_uint_8_list(apiObj.signature);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class KeriDartWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  KeriDartWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  KeriDartWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_new_public_key(
    int port_,
    int kt,
    ffi.Pointer<wire_uint_8_list> key_b64_url_safe,
  ) {
    return _wire_new_public_key(
      port_,
      kt,
      key_b64_url_safe,
    );
  }

  late final _wire_new_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_new_public_key');
  late final _wire_new_public_key = _wire_new_public_keyPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_signature_from_hex(
    int port_,
    int st,
    ffi.Pointer<wire_uint_8_list> signature,
  ) {
    return _wire_signature_from_hex(
      port_,
      st,
      signature,
    );
  }

  late final _wire_signature_from_hexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_signature_from_hex');
  late final _wire_signature_from_hex = _wire_signature_from_hexPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_signature_from_b64(
    int port_,
    int st,
    ffi.Pointer<wire_uint_8_list> signature,
  ) {
    return _wire_signature_from_b64(
      port_,
      st,
      signature,
    );
  }

  late final _wire_signature_from_b64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_signature_from_b64');
  late final _wire_signature_from_b64 = _wire_signature_from_b64Ptr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_with_initial_oobis(
    int port_,
    ffi.Pointer<wire_Config> config,
    ffi.Pointer<wire_uint_8_list> oobis_json,
  ) {
    return _wire_with_initial_oobis(
      port_,
      config,
      oobis_json,
    );
  }

  late final _wire_with_initial_oobisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Config>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_with_initial_oobis');
  late final _wire_with_initial_oobis = _wire_with_initial_oobisPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_Config>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_change_controller(
    int port_,
    ffi.Pointer<wire_uint_8_list> db_path,
  ) {
    return _wire_change_controller(
      port_,
      db_path,
    );
  }

  late final _wire_change_controllerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_change_controller');
  late final _wire_change_controller = _wire_change_controllerPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_init_kel(
    int port_,
    ffi.Pointer<wire_uint_8_list> input_app_dir,
    ffi.Pointer<wire_Config> optional_configs,
  ) {
    return _wire_init_kel(
      port_,
      input_app_dir,
      optional_configs,
    );
  }

  late final _wire_init_kelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Config>)>>('wire_init_kel');
  late final _wire_init_kel = _wire_init_kelPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Config>)>();

  void wire_incept(
    int port_,
    ffi.Pointer<wire_list_public_key> public_keys,
    ffi.Pointer<wire_list_public_key> next_pub_keys,
    ffi.Pointer<wire_StringList> witnesses,
    int witness_threshold,
  ) {
    return _wire_incept(
      port_,
      public_keys,
      next_pub_keys,
      witnesses,
      witness_threshold,
    );
  }

  late final _wire_inceptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_list_public_key>,
              ffi.Pointer<wire_list_public_key>,
              ffi.Pointer<wire_StringList>,
              ffi.Uint64)>>('wire_incept');
  late final _wire_incept = _wire_inceptPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_list_public_key>,
          ffi.Pointer<wire_list_public_key>,
          ffi.Pointer<wire_StringList>,
          int)>();

  void wire_finalize_inception(
    int port_,
    ffi.Pointer<wire_uint_8_list> event,
    ffi.Pointer<wire_Signature> signature,
  ) {
    return _wire_finalize_inception(
      port_,
      event,
      signature,
    );
  }

  late final _wire_finalize_inceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Signature>)>>('wire_finalize_inception');
  late final _wire_finalize_inception = _wire_finalize_inceptionPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Signature>)>();

  void wire_rotate(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_list_public_key> current_keys,
    ffi.Pointer<wire_list_public_key> new_next_keys,
    ffi.Pointer<wire_StringList> witness_to_add,
    ffi.Pointer<wire_StringList> witness_to_remove,
    int witness_threshold,
  ) {
    return _wire_rotate(
      port_,
      identifier,
      current_keys,
      new_next_keys,
      witness_to_add,
      witness_to_remove,
      witness_threshold,
    );
  }

  late final _wire_rotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_list_public_key>,
              ffi.Pointer<wire_list_public_key>,
              ffi.Pointer<wire_StringList>,
              ffi.Pointer<wire_StringList>,
              ffi.Uint64)>>('wire_rotate');
  late final _wire_rotate = _wire_rotatePtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_Identifier>,
          ffi.Pointer<wire_list_public_key>,
          ffi.Pointer<wire_list_public_key>,
          ffi.Pointer<wire_StringList>,
          ffi.Pointer<wire_StringList>,
          int)>();

  void wire_anchor(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_uint_8_list> data,
    ffi.Pointer<wire_DigestType> algo,
  ) {
    return _wire_anchor(
      port_,
      identifier,
      data,
      algo,
    );
  }

  late final _wire_anchorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_DigestType>)>>('wire_anchor');
  late final _wire_anchor = _wire_anchorPtr.asFunction<
      void Function(int, ffi.Pointer<wire_Identifier>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_DigestType>)>();

  void wire_anchor_digest(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_StringList> sais,
  ) {
    return _wire_anchor_digest(
      port_,
      identifier,
      sais,
    );
  }

  late final _wire_anchor_digestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_StringList>)>>('wire_anchor_digest');
  late final _wire_anchor_digest = _wire_anchor_digestPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_Identifier>, ffi.Pointer<wire_StringList>)>();

  void wire_add_watcher(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_uint_8_list> watcher_oobi,
  ) {
    return _wire_add_watcher(
      port_,
      identifier,
      watcher_oobi,
    );
  }

  late final _wire_add_watcherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_add_watcher');
  late final _wire_add_watcher = _wire_add_watcherPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_Identifier>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_send_oobi_to_watcher(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_uint_8_list> oobis_json,
  ) {
    return _wire_send_oobi_to_watcher(
      port_,
      identifier,
      oobis_json,
    );
  }

  late final _wire_send_oobi_to_watcherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_send_oobi_to_watcher');
  late final _wire_send_oobi_to_watcher =
      _wire_send_oobi_to_watcherPtr.asFunction<
          void Function(int, ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_finalize_event(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_uint_8_list> event,
    ffi.Pointer<wire_Signature> signature,
  ) {
    return _wire_finalize_event(
      port_,
      identifier,
      event,
      signature,
    );
  }

  late final _wire_finalize_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Signature>)>>('wire_finalize_event');
  late final _wire_finalize_event = _wire_finalize_eventPtr.asFunction<
      void Function(int, ffi.Pointer<wire_Identifier>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Signature>)>();

  void wire_notify_witnesses(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
  ) {
    return _wire_notify_witnesses(
      port_,
      identifier,
    );
  }

  late final _wire_notify_witnessesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Identifier>)>>('wire_notify_witnesses');
  late final _wire_notify_witnesses = _wire_notify_witnessesPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Identifier>)>();

  void wire_broadcast_receipts(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_list_identifier> witness_list,
  ) {
    return _wire_broadcast_receipts(
      port_,
      identifier,
      witness_list,
    );
  }

  late final _wire_broadcast_receiptsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_list_identifier>)>>('wire_broadcast_receipts');
  late final _wire_broadcast_receipts = _wire_broadcast_receiptsPtr.asFunction<
      void Function(int, ffi.Pointer<wire_Identifier>,
          ffi.Pointer<wire_list_identifier>)>();

  void wire_incept_group(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_list_identifier> participants,
    int signature_threshold,
    ffi.Pointer<wire_StringList> initial_witnesses,
    int witness_threshold,
  ) {
    return _wire_incept_group(
      port_,
      identifier,
      participants,
      signature_threshold,
      initial_witnesses,
      witness_threshold,
    );
  }

  late final _wire_incept_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_list_identifier>,
              ffi.Uint64,
              ffi.Pointer<wire_StringList>,
              ffi.Uint64)>>('wire_incept_group');
  late final _wire_incept_group = _wire_incept_groupPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_Identifier>,
          ffi.Pointer<wire_list_identifier>,
          int,
          ffi.Pointer<wire_StringList>,
          int)>();

  void wire_finalize_group_incept(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_uint_8_list> group_event,
    ffi.Pointer<wire_Signature> signature,
    ffi.Pointer<wire_list_data_and_signature> to_forward,
  ) {
    return _wire_finalize_group_incept(
      port_,
      identifier,
      group_event,
      signature,
      to_forward,
    );
  }

  late final _wire_finalize_group_inceptPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_Identifier>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_Signature>,
                  ffi.Pointer<wire_list_data_and_signature>)>>(
      'wire_finalize_group_incept');
  late final _wire_finalize_group_incept =
      _wire_finalize_group_inceptPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Signature>,
              ffi.Pointer<wire_list_data_and_signature>)>();

  void wire_query_mailbox(
    int port_,
    ffi.Pointer<wire_Identifier> who_ask,
    ffi.Pointer<wire_Identifier> about_who,
    ffi.Pointer<wire_StringList> witness,
  ) {
    return _wire_query_mailbox(
      port_,
      who_ask,
      about_who,
      witness,
    );
  }

  late final _wire_query_mailboxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_StringList>)>>('wire_query_mailbox');
  late final _wire_query_mailbox = _wire_query_mailboxPtr.asFunction<
      void Function(int, ffi.Pointer<wire_Identifier>,
          ffi.Pointer<wire_Identifier>, ffi.Pointer<wire_StringList>)>();

  void wire_query_watchers(
    int port_,
    ffi.Pointer<wire_Identifier> who_ask,
    ffi.Pointer<wire_Identifier> about_who,
  ) {
    return _wire_query_watchers(
      port_,
      who_ask,
      about_who,
    );
  }

  late final _wire_query_watchersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_Identifier>)>>('wire_query_watchers');
  late final _wire_query_watchers = _wire_query_watchersPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_Identifier>, ffi.Pointer<wire_Identifier>)>();

  void wire_finalize_query(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_uint_8_list> query_event,
    ffi.Pointer<wire_Signature> signature,
  ) {
    return _wire_finalize_query(
      port_,
      identifier,
      query_event,
      signature,
    );
  }

  late final _wire_finalize_queryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Signature>)>>('wire_finalize_query');
  late final _wire_finalize_query = _wire_finalize_queryPtr.asFunction<
      void Function(int, ffi.Pointer<wire_Identifier>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Signature>)>();

  void wire_resolve_oobi(
    int port_,
    ffi.Pointer<wire_uint_8_list> oobi_json,
  ) {
    return _wire_resolve_oobi(
      port_,
      oobi_json,
    );
  }

  late final _wire_resolve_oobiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_resolve_oobi');
  late final _wire_resolve_oobi = _wire_resolve_oobiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_process_stream(
    int port_,
    ffi.Pointer<wire_uint_8_list> stream,
  ) {
    return _wire_process_stream(
      port_,
      stream,
    );
  }

  late final _wire_process_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_process_stream');
  late final _wire_process_stream = _wire_process_streamPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_kel(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
  ) {
    return _wire_get_kel(
      port_,
      identifier,
    );
  }

  late final _wire_get_kelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_Identifier>)>>('wire_get_kel');
  late final _wire_get_kel = _wire_get_kelPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Identifier>)>();

  void wire_to_cesr_signature(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_Signature> signature,
  ) {
    return _wire_to_cesr_signature(
      port_,
      identifier,
      signature,
    );
  }

  late final _wire_to_cesr_signaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_Signature>)>>('wire_to_cesr_signature');
  late final _wire_to_cesr_signature = _wire_to_cesr_signaturePtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_Identifier>, ffi.Pointer<wire_Signature>)>();

  void wire_sign_to_cesr(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_uint_8_list> data,
    ffi.Pointer<wire_Signature> signature,
  ) {
    return _wire_sign_to_cesr(
      port_,
      identifier,
      data,
      signature,
    );
  }

  late final _wire_sign_to_cesrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Signature>)>>('wire_sign_to_cesr');
  late final _wire_sign_to_cesr = _wire_sign_to_cesrPtr.asFunction<
      void Function(int, ffi.Pointer<wire_Identifier>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Signature>)>();

  void wire_split_oobis_and_data(
    int port_,
    ffi.Pointer<wire_uint_8_list> stream,
  ) {
    return _wire_split_oobis_and_data(
      port_,
      stream,
    );
  }

  late final _wire_split_oobis_and_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_split_oobis_and_data');
  late final _wire_split_oobis_and_data = _wire_split_oobis_and_dataPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_verify_from_cesr(
    int port_,
    ffi.Pointer<wire_uint_8_list> stream,
  ) {
    return _wire_verify_from_cesr(
      port_,
      stream,
    );
  }

  late final _wire_verify_from_cesrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_verify_from_cesr');
  late final _wire_verify_from_cesr = _wire_verify_from_cesrPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_incept_registry(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
  ) {
    return _wire_incept_registry(
      port_,
      identifier,
    );
  }

  late final _wire_incept_registryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Identifier>)>>('wire_incept_registry');
  late final _wire_incept_registry = _wire_incept_registryPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Identifier>)>();

  void wire_issue_credential(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_uint_8_list> credential,
  ) {
    return _wire_issue_credential(
      port_,
      identifier,
      credential,
    );
  }

  late final _wire_issue_credentialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_issue_credential');
  late final _wire_issue_credential = _wire_issue_credentialPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_Identifier>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_revoke_credential(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_uint_8_list> credential_said,
  ) {
    return _wire_revoke_credential(
      port_,
      identifier,
      credential_said,
    );
  }

  late final _wire_revoke_credentialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_revoke_credential');
  late final _wire_revoke_credential = _wire_revoke_credentialPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_Identifier>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_query_tel(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_uint_8_list> registry_id,
    ffi.Pointer<wire_uint_8_list> credential_said,
  ) {
    return _wire_query_tel(
      port_,
      identifier,
      registry_id,
      credential_said,
    );
  }

  late final _wire_query_telPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_query_tel');
  late final _wire_query_tel = _wire_query_telPtr.asFunction<
      void Function(int, ffi.Pointer<wire_Identifier>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_finalize_tel_query(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_uint_8_list> query_event,
    ffi.Pointer<wire_Signature> signature,
  ) {
    return _wire_finalize_tel_query(
      port_,
      identifier,
      query_event,
      signature,
    );
  }

  late final _wire_finalize_tel_queryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Signature>)>>('wire_finalize_tel_query');
  late final _wire_finalize_tel_query = _wire_finalize_tel_queryPtr.asFunction<
      void Function(int, ffi.Pointer<wire_Identifier>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Signature>)>();

  void wire_get_credential_state(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_uint_8_list> credential_said,
  ) {
    return _wire_get_credential_state(
      port_,
      identifier,
      credential_said,
    );
  }

  late final _wire_get_credential_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_credential_state');
  late final _wire_get_credential_state =
      _wire_get_credential_statePtr.asFunction<
          void Function(int, ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_notify_backers(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
  ) {
    return _wire_notify_backers(
      port_,
      identifier,
    );
  }

  late final _wire_notify_backersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_Identifier>)>>('wire_notify_backers');
  late final _wire_notify_backers = _wire_notify_backersPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Identifier>)>();

  void wire_add_messagebox(
    int port_,
    ffi.Pointer<wire_Identifier> identifier,
    ffi.Pointer<wire_uint_8_list> messagebox_oobi,
  ) {
    return _wire_add_messagebox(
      port_,
      identifier,
      messagebox_oobi,
    );
  }

  late final _wire_add_messageboxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Identifier>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_add_messagebox');
  late final _wire_add_messagebox = _wire_add_messageboxPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_Identifier>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_messagebox(
    int port_,
    ffi.Pointer<wire_uint_8_list> whose,
  ) {
    return _wire_get_messagebox(
      port_,
      whose,
    );
  }

  late final _wire_get_messageboxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_messagebox');
  late final _wire_get_messagebox = _wire_get_messageboxPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_new_from_str__static_method__Identifier(
    int port_,
    ffi.Pointer<wire_uint_8_list> id_str,
  ) {
    return _wire_new_from_str__static_method__Identifier(
      port_,
      id_str,
    );
  }

  late final _wire_new_from_str__static_method__IdentifierPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_new_from_str__static_method__Identifier');
  late final _wire_new_from_str__static_method__Identifier =
      _wire_new_from_str__static_method__IdentifierPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_to_str__method__Identifier(
    int port_,
    ffi.Pointer<wire_Identifier> that,
  ) {
    return _wire_to_str__method__Identifier(
      port_,
      that,
    );
  }

  late final _wire_to_str__method__IdentifierPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Identifier>)>>(
      'wire_to_str__method__Identifier');
  late final _wire_to_str__method__Identifier =
      _wire_to_str__method__IdentifierPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Identifier>)>();

  void wire_new__static_method__DataAndSignature(
    int port_,
    ffi.Pointer<wire_uint_8_list> data,
    ffi.Pointer<wire_Signature> signature,
  ) {
    return _wire_new__static_method__DataAndSignature(
      port_,
      data,
      signature,
    );
  }

  late final _wire_new__static_method__DataAndSignaturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_Signature>)>>(
      'wire_new__static_method__DataAndSignature');
  late final _wire_new__static_method__DataAndSignature =
      _wire_new__static_method__DataAndSignaturePtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Signature>)>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_Config> new_box_autoadd_config_0() {
    return _new_box_autoadd_config_0();
  }

  late final _new_box_autoadd_config_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Config> Function()>>(
          'new_box_autoadd_config_0');
  late final _new_box_autoadd_config_0 = _new_box_autoadd_config_0Ptr
      .asFunction<ffi.Pointer<wire_Config> Function()>();

  ffi.Pointer<wire_DigestType> new_box_autoadd_digest_type_0() {
    return _new_box_autoadd_digest_type_0();
  }

  late final _new_box_autoadd_digest_type_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_DigestType> Function()>>(
          'new_box_autoadd_digest_type_0');
  late final _new_box_autoadd_digest_type_0 = _new_box_autoadd_digest_type_0Ptr
      .asFunction<ffi.Pointer<wire_DigestType> Function()>();

  ffi.Pointer<wire_Identifier> new_box_autoadd_identifier_0() {
    return _new_box_autoadd_identifier_0();
  }

  late final _new_box_autoadd_identifier_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Identifier> Function()>>(
          'new_box_autoadd_identifier_0');
  late final _new_box_autoadd_identifier_0 = _new_box_autoadd_identifier_0Ptr
      .asFunction<ffi.Pointer<wire_Identifier> Function()>();

  ffi.Pointer<wire_Signature> new_box_autoadd_signature_0() {
    return _new_box_autoadd_signature_0();
  }

  late final _new_box_autoadd_signature_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Signature> Function()>>(
          'new_box_autoadd_signature_0');
  late final _new_box_autoadd_signature_0 = _new_box_autoadd_signature_0Ptr
      .asFunction<ffi.Pointer<wire_Signature> Function()>();

  ffi.Pointer<wire_Signature> new_box_signature_0() {
    return _new_box_signature_0();
  }

  late final _new_box_signature_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Signature> Function()>>(
          'new_box_signature_0');
  late final _new_box_signature_0 = _new_box_signature_0Ptr
      .asFunction<ffi.Pointer<wire_Signature> Function()>();

  ffi.Pointer<wire_list_data_and_signature> new_list_data_and_signature_0(
    int len,
  ) {
    return _new_list_data_and_signature_0(
      len,
    );
  }

  late final _new_list_data_and_signature_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_data_and_signature> Function(
              ffi.Int32)>>('new_list_data_and_signature_0');
  late final _new_list_data_and_signature_0 = _new_list_data_and_signature_0Ptr
      .asFunction<ffi.Pointer<wire_list_data_and_signature> Function(int)>();

  ffi.Pointer<wire_list_identifier> new_list_identifier_0(
    int len,
  ) {
    return _new_list_identifier_0(
      len,
    );
  }

  late final _new_list_identifier_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_identifier> Function(
              ffi.Int32)>>('new_list_identifier_0');
  late final _new_list_identifier_0 = _new_list_identifier_0Ptr
      .asFunction<ffi.Pointer<wire_list_identifier> Function(int)>();

  ffi.Pointer<wire_list_public_key> new_list_public_key_0(
    int len,
  ) {
    return _new_list_public_key_0(
      len,
    );
  }

  late final _new_list_public_key_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_public_key> Function(
              ffi.Int32)>>('new_list_public_key_0');
  late final _new_list_public_key_0 = _new_list_public_key_0Ptr
      .asFunction<ffi.Pointer<wire_list_public_key> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<DigestTypeKind> inflate_DigestType_Blake2B256() {
    return _inflate_DigestType_Blake2B256();
  }

  late final _inflate_DigestType_Blake2B256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DigestTypeKind> Function()>>(
          'inflate_DigestType_Blake2B256');
  late final _inflate_DigestType_Blake2B256 = _inflate_DigestType_Blake2B256Ptr
      .asFunction<ffi.Pointer<DigestTypeKind> Function()>();

  ffi.Pointer<DigestTypeKind> inflate_DigestType_Blake2S256() {
    return _inflate_DigestType_Blake2S256();
  }

  late final _inflate_DigestType_Blake2S256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DigestTypeKind> Function()>>(
          'inflate_DigestType_Blake2S256');
  late final _inflate_DigestType_Blake2S256 = _inflate_DigestType_Blake2S256Ptr
      .asFunction<ffi.Pointer<DigestTypeKind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_Config extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> initial_oobis;
}

final class wire_PublicKey extends ffi.Struct {
  @ffi.Int32()
  external int derivation;

  external ffi.Pointer<wire_uint_8_list> public_key;
}

final class wire_list_public_key extends ffi.Struct {
  external ffi.Pointer<wire_PublicKey> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_Signature extends ffi.Struct {
  @ffi.Int32()
  external int derivation;

  external ffi.Pointer<wire_uint_8_list> signature;
}

final class wire_Identifier extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> id;
}

final class wire_DigestType_Blake3_256 extends ffi.Opaque {}

final class wire_DigestType_SHA3_256 extends ffi.Opaque {}

final class wire_DigestType_SHA2_256 extends ffi.Opaque {}

final class wire_DigestType_Blake3_512 extends ffi.Opaque {}

final class wire_DigestType_SHA3_512 extends ffi.Opaque {}

final class wire_DigestType_Blake2B512 extends ffi.Opaque {}

final class wire_DigestType_SHA2_512 extends ffi.Opaque {}

final class wire_DigestType_Blake2B256 extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class wire_DigestType_Blake2S256 extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

final class DigestTypeKind extends ffi.Union {
  external ffi.Pointer<wire_DigestType_Blake3_256> Blake3_256;

  external ffi.Pointer<wire_DigestType_SHA3_256> SHA3_256;

  external ffi.Pointer<wire_DigestType_SHA2_256> SHA2_256;

  external ffi.Pointer<wire_DigestType_Blake3_512> Blake3_512;

  external ffi.Pointer<wire_DigestType_SHA3_512> SHA3_512;

  external ffi.Pointer<wire_DigestType_Blake2B512> Blake2B512;

  external ffi.Pointer<wire_DigestType_SHA2_512> SHA2_512;

  external ffi.Pointer<wire_DigestType_Blake2B256> Blake2B256;

  external ffi.Pointer<wire_DigestType_Blake2S256> Blake2S256;
}

final class wire_DigestType extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<DigestTypeKind> kind;
}

final class wire_list_identifier extends ffi.Struct {
  external ffi.Pointer<wire_Identifier> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_DataAndSignature extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> data;

  external ffi.Pointer<wire_Signature> signature;
}

final class wire_list_data_and_signature extends ffi.Struct {
  external ffi.Pointer<wire_DataAndSignature> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
