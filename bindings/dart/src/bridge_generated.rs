#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    non_snake_case
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

use crate::api::*;
use flutter_rust_bridge::*;

// Section: imports

// Section: wire functions

#[no_mangle]
pub extern "C" fn wire_generate_key_pair(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "generate_key_pair",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(generate_key_pair()),
    )
}

#[no_mangle]
pub extern "C" fn wire_get_public_key(port_: i64, kp: *mut wire_KeyPair) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_public_key",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_kp = kp.wire2api();
            move |task_callback| Ok(get_public_key(api_kp))
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_sign(port_: i64, kp: *mut wire_KeyPair, message: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "sign",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_kp = kp.wire2api();
            let api_message = message.wire2api();
            move |task_callback| sign(api_kp, api_message)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_init_kel(port_: i64, input_app_dir: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "init_kel",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_input_app_dir = input_app_dir.wire2api();
            move |task_callback| init_kel(api_input_app_dir)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_incept(
    port_: i64,
    public_keys: *mut wire_list_public_key,
    next_pub_keys: *mut wire_list_public_key,
    witnesses: *mut wire_StringList,
    witness_threshold: u64,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "incept",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_public_keys = public_keys.wire2api();
            let api_next_pub_keys = next_pub_keys.wire2api();
            let api_witnesses = witnesses.wire2api();
            let api_witness_threshold = witness_threshold.wire2api();
            move |task_callback| {
                incept(
                    api_public_keys,
                    api_next_pub_keys,
                    api_witnesses,
                    api_witness_threshold,
                )
            }
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_finalize_inception(
    port_: i64,
    event: *mut wire_uint_8_list,
    signature: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "finalize_inception",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_event = event.wire2api();
            let api_signature = signature.wire2api();
            move |task_callback| finalize_inception(api_event, api_signature)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_rotate(
    port_: i64,
    controller: *mut wire_Controller,
    current_keys: *mut wire_list_public_key,
    new_next_keys: *mut wire_list_public_key,
    witness_to_add: *mut wire_StringList,
    witness_to_remove: *mut wire_StringList,
    witness_threshold: u64,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "rotate",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_controller = controller.wire2api();
            let api_current_keys = current_keys.wire2api();
            let api_new_next_keys = new_next_keys.wire2api();
            let api_witness_to_add = witness_to_add.wire2api();
            let api_witness_to_remove = witness_to_remove.wire2api();
            let api_witness_threshold = witness_threshold.wire2api();
            move |task_callback| {
                rotate(
                    api_controller,
                    api_current_keys,
                    api_new_next_keys,
                    api_witness_to_add,
                    api_witness_to_remove,
                    api_witness_threshold,
                )
            }
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_finalize_event(
    port_: i64,
    event: *mut wire_uint_8_list,
    signature: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "finalize_event",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_event = event.wire2api();
            let api_signature = signature.wire2api();
            move |task_callback| finalize_event(api_event, api_signature)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_get_kel(port_: i64, id: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_kel",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| get_kel(api_id)
        },
    )
}

// Section: wire structs

#[repr(C)]
#[derive(Clone)]
pub struct wire_StringList {
    ptr: *mut *mut wire_uint_8_list,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_Controller {
    identifier: *mut wire_uint_8_list,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_KeyPair {
    sk: *mut wire_uint_8_list,
    pk: *mut wire_uint_8_list,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_list_public_key {
    ptr: *mut wire_PublicKey,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_PublicKey {
    field0: *mut wire_uint_8_list,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_uint_8_list {
    ptr: *mut u8,
    len: i32,
}

// Section: wrapper structs

// Section: static checks

// Section: allocate functions

#[no_mangle]
pub extern "C" fn new_StringList(len: i32) -> *mut wire_StringList {
    let wrap = wire_StringList {
        ptr: support::new_leak_vec_ptr(<*mut wire_uint_8_list>::new_with_null_ptr(), len),
        len,
    };
    support::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn new_box_autoadd_controller() -> *mut wire_Controller {
    support::new_leak_box_ptr(wire_Controller::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn new_box_autoadd_key_pair() -> *mut wire_KeyPair {
    support::new_leak_box_ptr(wire_KeyPair::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn new_list_public_key(len: i32) -> *mut wire_list_public_key {
    let wrap = wire_list_public_key {
        ptr: support::new_leak_vec_ptr(<wire_PublicKey>::new_with_null_ptr(), len),
        len,
    };
    support::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn new_uint_8_list(len: i32) -> *mut wire_uint_8_list {
    let ans = wire_uint_8_list {
        ptr: support::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    support::new_leak_box_ptr(ans)
}

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<String> for *mut wire_uint_8_list {
    fn wire2api(self) -> String {
        let vec: Vec<u8> = self.wire2api();
        String::from_utf8_lossy(&vec).into_owned()
    }
}

impl Wire2Api<Vec<String>> for *mut wire_StringList {
    fn wire2api(self) -> Vec<String> {
        let vec = unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(Wire2Api::wire2api).collect()
    }
}

impl Wire2Api<Controller> for *mut wire_Controller {
    fn wire2api(self) -> Controller {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

impl Wire2Api<KeyPair> for *mut wire_KeyPair {
    fn wire2api(self) -> KeyPair {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

impl Wire2Api<Controller> for wire_Controller {
    fn wire2api(self) -> Controller {
        Controller {
            identifier: self.identifier.wire2api(),
        }
    }
}

impl Wire2Api<KeyPair> for wire_KeyPair {
    fn wire2api(self) -> KeyPair {
        KeyPair {
            sk: self.sk.wire2api(),
            pk: self.pk.wire2api(),
        }
    }
}

impl Wire2Api<Vec<PublicKey>> for *mut wire_list_public_key {
    fn wire2api(self) -> Vec<PublicKey> {
        let vec = unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(Wire2Api::wire2api).collect()
    }
}

impl Wire2Api<PublicKey> for wire_PublicKey {
    fn wire2api(self) -> PublicKey {
        PublicKey(self.field0.wire2api())
    }
}

impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
    fn wire2api(self) -> Vec<u8> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}

// Section: impl NewWithNullPtr

pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}

impl NewWithNullPtr for wire_Controller {
    fn new_with_null_ptr() -> Self {
        Self {
            identifier: core::ptr::null_mut(),
        }
    }
}

impl NewWithNullPtr for wire_KeyPair {
    fn new_with_null_ptr() -> Self {
        Self {
            sk: core::ptr::null_mut(),
            pk: core::ptr::null_mut(),
        }
    }
}

impl NewWithNullPtr for wire_PublicKey {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
        }
    }
}

// Section: impl IntoDart

impl support::IntoDart for Controller {
    fn into_dart(self) -> support::DartCObject {
        vec![self.identifier.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Controller {}

impl support::IntoDart for KeyPair {
    fn into_dart(self) -> support::DartCObject {
        vec![self.sk.into_dart(), self.pk.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for KeyPair {}

impl support::IntoDart for PublicKey {
    fn into_dart(self) -> support::DartCObject {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PublicKey {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

// Section: sync execution mode utility

#[no_mangle]
pub extern "C" fn free_WireSyncReturnStruct(val: support::WireSyncReturnStruct) {
    unsafe {
        let _ = support::vec_from_leak_ptr(val.ptr, val.len);
    }
}
