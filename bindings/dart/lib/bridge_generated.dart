// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class KeriDart {
  Future<Config> withInitialOobis(
      {required Config config, required String oobisJson, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWithInitialOobisConstMeta;

  Future<bool> initKel(
      {required String inputAppDir, Config? optionalConfigs, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitKelConstMeta;

  Future<String> incept(
      {required List<PublicKey> publicKeys,
      required List<PublicKey> nextPubKeys,
      required List<String> witnesses,
      required int witnessThreshold,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInceptConstMeta;

  Future<Controller> finalizeInception(
      {required String event, required Signature signature, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFinalizeInceptionConstMeta;

  Future<String> rotate(
      {required Controller controller,
      required List<PublicKey> currentKeys,
      required List<PublicKey> newNextKeys,
      required List<String> witnessToAdd,
      required List<String> witnessToRemove,
      required int witnessThreshold,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRotateConstMeta;

  Future<String> anchor(
      {required Controller controller,
      required String data,
      required DigestType algo,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAnchorConstMeta;

  Future<String> anchorDigest(
      {required Controller controller,
      required List<String> sais,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAnchorDigestConstMeta;

  Future<String> addWatcher(
      {required Controller controller,
      required String watcherOobi,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddWatcherConstMeta;

  Future<bool> finalizeEvent(
      {required Controller identifier,
      required String event,
      required Signature signature,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFinalizeEventConstMeta;

  Future<bool> resolveOobi({required String oobiJson, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kResolveOobiConstMeta;

  Future<bool> query(
      {required Controller controller,
      required String oobisJson,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kQueryConstMeta;

  Future<bool> processStream({required String stream, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kProcessStreamConstMeta;

  Future<String> getKel({required Controller cont, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetKelConstMeta;

  Future<String> getKelByStr({required String contId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetKelByStrConstMeta;

  /// Returns pairs: public key encoded in base64 and signature encoded in hex
  Future<List<PublicKeySignaturePair>> getCurrentPublicKey(
      {required String attachment, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetCurrentPublicKeyConstMeta;
}

class Config {
  final String initialOobis;

  Config({
    required this.initialOobis,
  });
}

class Controller {
  final String identifier;

  Controller({
    required this.identifier,
  });
}

enum DigestType {
  Blake3_256,
  SHA3_256,
  SHA2_256,
  Blake3_512,
  SHA3_512,
  Blake2B512,
  SHA2_512,
}

enum KeyType {
  ECDSAsecp256k1,
  Ed25519,
  Ed448,
  X25519,
  X448,
}

class PublicKey {
  final KeyType algorithm;

  /// base 64 string of public key
  final String key;

  PublicKey({
    required this.algorithm,
    required this.key,
  });
}

class PublicKeySignaturePair {
  final PublicKey key;
  final Signature signature;

  PublicKeySignaturePair({
    required this.key,
    required this.signature,
  });
}

class Signature {
  final SignatureType algorithm;

  /// hex string of signature
  final String key;

  Signature({
    required this.algorithm,
    required this.key,
  });
}

enum SignatureType {
  Ed25519Sha512,
  ECDSAsecp256k1Sha256,
  Ed448,
}

class KeriDartImpl extends FlutterRustBridgeBase<KeriDartWire>
    implements KeriDart {
  factory KeriDartImpl(ffi.DynamicLibrary dylib) =>
      KeriDartImpl.raw(KeriDartWire(dylib));

  KeriDartImpl.raw(KeriDartWire inner) : super(inner);

  Future<Config> withInitialOobis(
          {required Config config, required String oobisJson, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_with_initial_oobis(port_,
            _api2wire_box_autoadd_config(config), _api2wire_String(oobisJson)),
        parseSuccessData: _wire2api_config,
        constMeta: kWithInitialOobisConstMeta,
        argValues: [config, oobisJson],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kWithInitialOobisConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "with_initial_oobis",
        argNames: ["config", "oobisJson"],
      );

  Future<bool> initKel(
          {required String inputAppDir,
          Config? optionalConfigs,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_init_kel(
            port_,
            _api2wire_String(inputAppDir),
            _api2wire_opt_box_autoadd_config(optionalConfigs)),
        parseSuccessData: _wire2api_bool,
        constMeta: kInitKelConstMeta,
        argValues: [inputAppDir, optionalConfigs],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kInitKelConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_kel",
        argNames: ["inputAppDir", "optionalConfigs"],
      );

  Future<String> incept(
          {required List<PublicKey> publicKeys,
          required List<PublicKey> nextPubKeys,
          required List<String> witnesses,
          required int witnessThreshold,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_incept(
            port_,
            _api2wire_list_public_key(publicKeys),
            _api2wire_list_public_key(nextPubKeys),
            _api2wire_StringList(witnesses),
            _api2wire_u64(witnessThreshold)),
        parseSuccessData: _wire2api_String,
        constMeta: kInceptConstMeta,
        argValues: [publicKeys, nextPubKeys, witnesses, witnessThreshold],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kInceptConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "incept",
        argNames: [
          "publicKeys",
          "nextPubKeys",
          "witnesses",
          "witnessThreshold"
        ],
      );

  Future<Controller> finalizeInception(
          {required String event,
          required Signature signature,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_finalize_inception(
            port_,
            _api2wire_String(event),
            _api2wire_box_autoadd_signature(signature)),
        parseSuccessData: _wire2api_controller,
        constMeta: kFinalizeInceptionConstMeta,
        argValues: [event, signature],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kFinalizeInceptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "finalize_inception",
        argNames: ["event", "signature"],
      );

  Future<String> rotate(
          {required Controller controller,
          required List<PublicKey> currentKeys,
          required List<PublicKey> newNextKeys,
          required List<String> witnessToAdd,
          required List<String> witnessToRemove,
          required int witnessThreshold,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_rotate(
            port_,
            _api2wire_box_autoadd_controller(controller),
            _api2wire_list_public_key(currentKeys),
            _api2wire_list_public_key(newNextKeys),
            _api2wire_StringList(witnessToAdd),
            _api2wire_StringList(witnessToRemove),
            _api2wire_u64(witnessThreshold)),
        parseSuccessData: _wire2api_String,
        constMeta: kRotateConstMeta,
        argValues: [
          controller,
          currentKeys,
          newNextKeys,
          witnessToAdd,
          witnessToRemove,
          witnessThreshold
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kRotateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "rotate",
        argNames: [
          "controller",
          "currentKeys",
          "newNextKeys",
          "witnessToAdd",
          "witnessToRemove",
          "witnessThreshold"
        ],
      );

  Future<String> anchor(
          {required Controller controller,
          required String data,
          required DigestType algo,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_anchor(
            port_,
            _api2wire_box_autoadd_controller(controller),
            _api2wire_String(data),
            _api2wire_digest_type(algo)),
        parseSuccessData: _wire2api_String,
        constMeta: kAnchorConstMeta,
        argValues: [controller, data, algo],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kAnchorConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "anchor",
        argNames: ["controller", "data", "algo"],
      );

  Future<String> anchorDigest(
          {required Controller controller,
          required List<String> sais,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_anchor_digest(
            port_,
            _api2wire_box_autoadd_controller(controller),
            _api2wire_StringList(sais)),
        parseSuccessData: _wire2api_String,
        constMeta: kAnchorDigestConstMeta,
        argValues: [controller, sais],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kAnchorDigestConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "anchor_digest",
        argNames: ["controller", "sais"],
      );

  Future<String> addWatcher(
          {required Controller controller,
          required String watcherOobi,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_add_watcher(
            port_,
            _api2wire_box_autoadd_controller(controller),
            _api2wire_String(watcherOobi)),
        parseSuccessData: _wire2api_String,
        constMeta: kAddWatcherConstMeta,
        argValues: [controller, watcherOobi],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kAddWatcherConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add_watcher",
        argNames: ["controller", "watcherOobi"],
      );

  Future<bool> finalizeEvent(
          {required Controller identifier,
          required String event,
          required Signature signature,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_finalize_event(
            port_,
            _api2wire_box_autoadd_controller(identifier),
            _api2wire_String(event),
            _api2wire_box_autoadd_signature(signature)),
        parseSuccessData: _wire2api_bool,
        constMeta: kFinalizeEventConstMeta,
        argValues: [identifier, event, signature],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kFinalizeEventConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "finalize_event",
        argNames: ["identifier", "event", "signature"],
      );

  Future<bool> resolveOobi({required String oobiJson, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_resolve_oobi(port_, _api2wire_String(oobiJson)),
        parseSuccessData: _wire2api_bool,
        constMeta: kResolveOobiConstMeta,
        argValues: [oobiJson],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kResolveOobiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "resolve_oobi",
        argNames: ["oobiJson"],
      );

  Future<bool> query(
          {required Controller controller,
          required String oobisJson,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_query(
            port_,
            _api2wire_box_autoadd_controller(controller),
            _api2wire_String(oobisJson)),
        parseSuccessData: _wire2api_bool,
        constMeta: kQueryConstMeta,
        argValues: [controller, oobisJson],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kQueryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "query",
        argNames: ["controller", "oobisJson"],
      );

  Future<bool> processStream({required String stream, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_process_stream(port_, _api2wire_String(stream)),
        parseSuccessData: _wire2api_bool,
        constMeta: kProcessStreamConstMeta,
        argValues: [stream],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kProcessStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "process_stream",
        argNames: ["stream"],
      );

  Future<String> getKel({required Controller cont, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_get_kel(port_, _api2wire_box_autoadd_controller(cont)),
        parseSuccessData: _wire2api_String,
        constMeta: kGetKelConstMeta,
        argValues: [cont],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetKelConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_kel",
        argNames: ["cont"],
      );

  Future<String> getKelByStr({required String contId, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_get_kel_by_str(port_, _api2wire_String(contId)),
        parseSuccessData: _wire2api_String,
        constMeta: kGetKelByStrConstMeta,
        argValues: [contId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetKelByStrConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_kel_by_str",
        argNames: ["contId"],
      );

  Future<List<PublicKeySignaturePair>> getCurrentPublicKey(
          {required String attachment, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_current_public_key(
            port_, _api2wire_String(attachment)),
        parseSuccessData: _wire2api_list_public_key_signature_pair,
        constMeta: kGetCurrentPublicKeyConstMeta,
        argValues: [attachment],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetCurrentPublicKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_current_public_key",
        argNames: ["attachment"],
      );

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  ffi.Pointer<wire_StringList> _api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = _api2wire_String(raw[i]);
    }
    return ans;
  }

  ffi.Pointer<wire_Config> _api2wire_box_autoadd_config(Config raw) {
    final ptr = inner.new_box_autoadd_config();
    _api_fill_to_wire_config(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_Controller> _api2wire_box_autoadd_controller(
      Controller raw) {
    final ptr = inner.new_box_autoadd_controller();
    _api_fill_to_wire_controller(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_Signature> _api2wire_box_autoadd_signature(Signature raw) {
    final ptr = inner.new_box_autoadd_signature();
    _api_fill_to_wire_signature(raw, ptr.ref);
    return ptr;
  }

  int _api2wire_digest_type(DigestType raw) {
    return raw.index;
  }

  int _api2wire_key_type(KeyType raw) {
    return raw.index;
  }

  ffi.Pointer<wire_list_public_key> _api2wire_list_public_key(
      List<PublicKey> raw) {
    final ans = inner.new_list_public_key(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_public_key(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  ffi.Pointer<wire_Config> _api2wire_opt_box_autoadd_config(Config? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_autoadd_config(raw);
  }

  int _api2wire_signature_type(SignatureType raw) {
    return raw.index;
  }

  int _api2wire_u64(int raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_config(
      Config apiObj, ffi.Pointer<wire_Config> wireObj) {
    _api_fill_to_wire_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_controller(
      Controller apiObj, ffi.Pointer<wire_Controller> wireObj) {
    _api_fill_to_wire_controller(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_signature(
      Signature apiObj, ffi.Pointer<wire_Signature> wireObj) {
    _api_fill_to_wire_signature(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_config(Config apiObj, wire_Config wireObj) {
    wireObj.initial_oobis = _api2wire_String(apiObj.initialOobis);
  }

  void _api_fill_to_wire_controller(
      Controller apiObj, wire_Controller wireObj) {
    wireObj.identifier = _api2wire_String(apiObj.identifier);
  }

  void _api_fill_to_wire_opt_box_autoadd_config(
      Config? apiObj, ffi.Pointer<wire_Config> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_config(apiObj, wireObj);
  }

  void _api_fill_to_wire_public_key(PublicKey apiObj, wire_PublicKey wireObj) {
    wireObj.algorithm = _api2wire_key_type(apiObj.algorithm);
    wireObj.key = _api2wire_String(apiObj.key);
  }

  void _api_fill_to_wire_signature(Signature apiObj, wire_Signature wireObj) {
    wireObj.algorithm = _api2wire_signature_type(apiObj.algorithm);
    wireObj.key = _api2wire_String(apiObj.key);
  }
}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

Config _wire2api_config(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1)
    throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return Config(
    initialOobis: _wire2api_String(arr[0]),
  );
}

Controller _wire2api_controller(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1)
    throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return Controller(
    identifier: _wire2api_String(arr[0]),
  );
}

KeyType _wire2api_key_type(dynamic raw) {
  return KeyType.values[raw];
}

List<PublicKeySignaturePair> _wire2api_list_public_key_signature_pair(
    dynamic raw) {
  return (raw as List<dynamic>)
      .map(_wire2api_public_key_signature_pair)
      .toList();
}

PublicKey _wire2api_public_key(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return PublicKey(
    algorithm: _wire2api_key_type(arr[0]),
    key: _wire2api_String(arr[1]),
  );
}

PublicKeySignaturePair _wire2api_public_key_signature_pair(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return PublicKeySignaturePair(
    key: _wire2api_public_key(arr[0]),
    signature: _wire2api_signature(arr[1]),
  );
}

Signature _wire2api_signature(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return Signature(
    algorithm: _wire2api_signature_type(arr[0]),
    key: _wire2api_String(arr[1]),
  );
}

SignatureType _wire2api_signature_type(dynamic raw) {
  return SignatureType.values[raw];
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class KeriDartWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  KeriDartWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  KeriDartWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_with_initial_oobis(
    int port_,
    ffi.Pointer<wire_Config> config,
    ffi.Pointer<wire_uint_8_list> oobis_json,
  ) {
    return _wire_with_initial_oobis(
      port_,
      config,
      oobis_json,
    );
  }

  late final _wire_with_initial_oobisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Config>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_with_initial_oobis');
  late final _wire_with_initial_oobis = _wire_with_initial_oobisPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_Config>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_init_kel(
    int port_,
    ffi.Pointer<wire_uint_8_list> input_app_dir,
    ffi.Pointer<wire_Config> optional_configs,
  ) {
    return _wire_init_kel(
      port_,
      input_app_dir,
      optional_configs,
    );
  }

  late final _wire_init_kelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Config>)>>('wire_init_kel');
  late final _wire_init_kel = _wire_init_kelPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Config>)>();

  void wire_incept(
    int port_,
    ffi.Pointer<wire_list_public_key> public_keys,
    ffi.Pointer<wire_list_public_key> next_pub_keys,
    ffi.Pointer<wire_StringList> witnesses,
    int witness_threshold,
  ) {
    return _wire_incept(
      port_,
      public_keys,
      next_pub_keys,
      witnesses,
      witness_threshold,
    );
  }

  late final _wire_inceptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_list_public_key>,
              ffi.Pointer<wire_list_public_key>,
              ffi.Pointer<wire_StringList>,
              ffi.Uint64)>>('wire_incept');
  late final _wire_incept = _wire_inceptPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_list_public_key>,
          ffi.Pointer<wire_list_public_key>,
          ffi.Pointer<wire_StringList>,
          int)>();

  void wire_finalize_inception(
    int port_,
    ffi.Pointer<wire_uint_8_list> event,
    ffi.Pointer<wire_Signature> signature,
  ) {
    return _wire_finalize_inception(
      port_,
      event,
      signature,
    );
  }

  late final _wire_finalize_inceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Signature>)>>('wire_finalize_inception');
  late final _wire_finalize_inception = _wire_finalize_inceptionPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Signature>)>();

  void wire_rotate(
    int port_,
    ffi.Pointer<wire_Controller> controller,
    ffi.Pointer<wire_list_public_key> current_keys,
    ffi.Pointer<wire_list_public_key> new_next_keys,
    ffi.Pointer<wire_StringList> witness_to_add,
    ffi.Pointer<wire_StringList> witness_to_remove,
    int witness_threshold,
  ) {
    return _wire_rotate(
      port_,
      controller,
      current_keys,
      new_next_keys,
      witness_to_add,
      witness_to_remove,
      witness_threshold,
    );
  }

  late final _wire_rotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Controller>,
              ffi.Pointer<wire_list_public_key>,
              ffi.Pointer<wire_list_public_key>,
              ffi.Pointer<wire_StringList>,
              ffi.Pointer<wire_StringList>,
              ffi.Uint64)>>('wire_rotate');
  late final _wire_rotate = _wire_rotatePtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_Controller>,
          ffi.Pointer<wire_list_public_key>,
          ffi.Pointer<wire_list_public_key>,
          ffi.Pointer<wire_StringList>,
          ffi.Pointer<wire_StringList>,
          int)>();

  void wire_anchor(
    int port_,
    ffi.Pointer<wire_Controller> controller,
    ffi.Pointer<wire_uint_8_list> data,
    int algo,
  ) {
    return _wire_anchor(
      port_,
      controller,
      data,
      algo,
    );
  }

  late final _wire_anchorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Controller>,
              ffi.Pointer<wire_uint_8_list>, ffi.Int32)>>('wire_anchor');
  late final _wire_anchor = _wire_anchorPtr.asFunction<
      void Function(int, ffi.Pointer<wire_Controller>,
          ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_anchor_digest(
    int port_,
    ffi.Pointer<wire_Controller> controller,
    ffi.Pointer<wire_StringList> sais,
  ) {
    return _wire_anchor_digest(
      port_,
      controller,
      sais,
    );
  }

  late final _wire_anchor_digestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Controller>,
              ffi.Pointer<wire_StringList>)>>('wire_anchor_digest');
  late final _wire_anchor_digest = _wire_anchor_digestPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_Controller>, ffi.Pointer<wire_StringList>)>();

  void wire_add_watcher(
    int port_,
    ffi.Pointer<wire_Controller> controller,
    ffi.Pointer<wire_uint_8_list> watcher_oobi,
  ) {
    return _wire_add_watcher(
      port_,
      controller,
      watcher_oobi,
    );
  }

  late final _wire_add_watcherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Controller>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_add_watcher');
  late final _wire_add_watcher = _wire_add_watcherPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_Controller>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_finalize_event(
    int port_,
    ffi.Pointer<wire_Controller> identifier,
    ffi.Pointer<wire_uint_8_list> event,
    ffi.Pointer<wire_Signature> signature,
  ) {
    return _wire_finalize_event(
      port_,
      identifier,
      event,
      signature,
    );
  }

  late final _wire_finalize_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Controller>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Signature>)>>('wire_finalize_event');
  late final _wire_finalize_event = _wire_finalize_eventPtr.asFunction<
      void Function(int, ffi.Pointer<wire_Controller>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Signature>)>();

  void wire_resolve_oobi(
    int port_,
    ffi.Pointer<wire_uint_8_list> oobi_json,
  ) {
    return _wire_resolve_oobi(
      port_,
      oobi_json,
    );
  }

  late final _wire_resolve_oobiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_resolve_oobi');
  late final _wire_resolve_oobi = _wire_resolve_oobiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_query(
    int port_,
    ffi.Pointer<wire_Controller> controller,
    ffi.Pointer<wire_uint_8_list> oobis_json,
  ) {
    return _wire_query(
      port_,
      controller,
      oobis_json,
    );
  }

  late final _wire_queryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Controller>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_query');
  late final _wire_query = _wire_queryPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_Controller>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_process_stream(
    int port_,
    ffi.Pointer<wire_uint_8_list> stream,
  ) {
    return _wire_process_stream(
      port_,
      stream,
    );
  }

  late final _wire_process_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_process_stream');
  late final _wire_process_stream = _wire_process_streamPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_kel(
    int port_,
    ffi.Pointer<wire_Controller> cont,
  ) {
    return _wire_get_kel(
      port_,
      cont,
    );
  }

  late final _wire_get_kelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_Controller>)>>('wire_get_kel');
  late final _wire_get_kel = _wire_get_kelPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Controller>)>();

  void wire_get_kel_by_str(
    int port_,
    ffi.Pointer<wire_uint_8_list> cont_id,
  ) {
    return _wire_get_kel_by_str(
      port_,
      cont_id,
    );
  }

  late final _wire_get_kel_by_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_kel_by_str');
  late final _wire_get_kel_by_str = _wire_get_kel_by_strPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_current_public_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> attachment,
  ) {
    return _wire_get_current_public_key(
      port_,
      attachment,
    );
  }

  late final _wire_get_current_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_current_public_key');
  late final _wire_get_current_public_key = _wire_get_current_public_keyPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_StringList> new_StringList(
    int len,
  ) {
    return _new_StringList(
      len,
    );
  }

  late final _new_StringListPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList');
  late final _new_StringList = _new_StringListPtr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_Config> new_box_autoadd_config() {
    return _new_box_autoadd_config();
  }

  late final _new_box_autoadd_configPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Config> Function()>>(
          'new_box_autoadd_config');
  late final _new_box_autoadd_config = _new_box_autoadd_configPtr
      .asFunction<ffi.Pointer<wire_Config> Function()>();

  ffi.Pointer<wire_Controller> new_box_autoadd_controller() {
    return _new_box_autoadd_controller();
  }

  late final _new_box_autoadd_controllerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Controller> Function()>>(
          'new_box_autoadd_controller');
  late final _new_box_autoadd_controller = _new_box_autoadd_controllerPtr
      .asFunction<ffi.Pointer<wire_Controller> Function()>();

  ffi.Pointer<wire_Signature> new_box_autoadd_signature() {
    return _new_box_autoadd_signature();
  }

  late final _new_box_autoadd_signaturePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Signature> Function()>>(
          'new_box_autoadd_signature');
  late final _new_box_autoadd_signature = _new_box_autoadd_signaturePtr
      .asFunction<ffi.Pointer<wire_Signature> Function()>();

  ffi.Pointer<wire_list_public_key> new_list_public_key(
    int len,
  ) {
    return _new_list_public_key(
      len,
    );
  }

  late final _new_list_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_public_key> Function(
              ffi.Int32)>>('new_list_public_key');
  late final _new_list_public_key = _new_list_public_keyPtr
      .asFunction<ffi.Pointer<wire_list_public_key> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list');
  late final _new_uint_8_list = _new_uint_8_listPtr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Config extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> initial_oobis;
}

class wire_PublicKey extends ffi.Struct {
  @ffi.Int32()
  external int algorithm;

  external ffi.Pointer<wire_uint_8_list> key;
}

class wire_list_public_key extends ffi.Struct {
  external ffi.Pointer<wire_PublicKey> ptr;

  @ffi.Int32()
  external int len;
}

class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Signature extends ffi.Struct {
  @ffi.Int32()
  external int algorithm;

  external ffi.Pointer<wire_uint_8_list> key;
}

class wire_Controller extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> identifier;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
